import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from io import BytesIO
from aiogram.types import BufferedInputFile
import aiosqlite
from typing import Literal, Optional
from datetime import datetime

DB_PATH = "sadhana.db"

COLORS = [
    "#ff4b4b",  # –∫—Ä–∞—Å–Ω—ã–π
    "#ffa500",  # –æ—Ä–∞–Ω–∂–µ–≤—ã–π
    "#00c3ff",  # –≥–æ–ª—É–±–æ–π
    "#7fff00",  # –ª–∞–π–º–æ–≤—ã–π
    "#da70d6",  # —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
    "#ffd700",  # –∑–æ–ª–æ—Ç–æ–π
    "#1e90ff",  # —Å–∏–Ω–∏–π
    "#ff69b4",  # —è—Ä–∫–æ-—Ä–æ–∑–æ–≤—ã–π
    "#32cd32",  # –∑–µ–ª–µ–Ω—ã–π
    "#ff8c00",  # —Ç–µ–º–Ω–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π
    "#8a2be2",  # —Å–∏–Ω–µ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
    "#00fa9a",  # –º—è—Ç–Ω—ã–π
    "#ff1493",  # –≥–ª—É–±–æ–∫–∏–π —Ä–æ–∑–æ–≤—ã–π
    "#778899",  # —Å–µ—Ä–æ-–≥–æ–ª—É–±–æ–π
    "#40e0d0",  # –±–∏—Ä—é–∑–æ–≤—ã–π
]


async def build_chart(
    user_id: str,
    mode: Literal["minutes", "cycles"] = "minutes",
    each_practice: bool = False,
    practice: Optional[str] = None
) -> Optional[BufferedInputFile]:
    async with aiosqlite.connect(DB_PATH) as db:
        if practice:
            # üëá –ì—Ä–∞—Ñ–∏–∫ –¥–ª—è –æ–¥–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏
            cursor = await db.execute(f"""
                SELECT date, SUM({mode})
                FROM logs
                WHERE user_id = ? AND practice = ?
                GROUP BY date
                ORDER BY date
            """, (user_id, practice))
            rows = await cursor.fetchall()
            if not rows:
                return None
            df = pd.DataFrame(rows, columns=["date", mode])
            df["date"] = pd.to_datetime(df["date"])
            df = df.sort_values("date")
            df["cumulative"] = df[mode].cumsum()
        elif each_practice:
            # üëá –ì—Ä–∞—Ñ–∏–∫ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–∞–∫—Ç–∏–∫ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            cursor = await db.execute(f"""
                SELECT date, practice, SUM({mode})
                FROM logs
                WHERE user_id = ?
                GROUP BY date, practice
                ORDER BY date
            """, (user_id,))
            rows = await cursor.fetchall()
            if not rows:
                return None
            df = pd.DataFrame(rows, columns=["date", "practice", mode])
            df["date"] = pd.to_datetime(df["date"])
            df = df.sort_values("date")
        else:
            # ‚ùå –û—à–∏–±–∫–∞, –µ—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            return None

    # üé® –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    plt.style.use("dark_background")
    plt.figure(figsize=(10, 5))

    if each_practice:
        color_map = {p: COLORS[i % len(COLORS)] for i, p in enumerate(df["practice"].unique())}
        for p in df["practice"].unique():
            sub = df[df["practice"] == p].copy()
            sub["cumulative"] = sub[mode].cumsum()
            color = color_map[p]
            plt.plot(sub["date"], sub["cumulative"], marker="o", linewidth=2.5, label=p.capitalize(), color=color)
            for x, y in zip(sub["date"], sub["cumulative"]):
                if pd.notna(y):
                    plt.text(x, y + 5, f"{int(y)}", ha="center", fontsize=9, fontweight="bold", color=color)

        title = "–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–∞–∂–¥–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ"
    elif practice:
        color = COLORS[0]
        plt.plot(df["date"], df["cumulative"], marker="o", linewidth=2.5, color=color)
        for x, y in zip(df["date"], df["cumulative"]):
            if pd.notna(y):
                plt.text(x, y + 5, f"{int(y)}", ha="center", fontsize=9, fontweight="bold", color=color)

        title = f"–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø—Ä–∞–∫—Ç–∏–∫–µ {practice.capitalize()}"
    else:
        # –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è
        return None

    # ‚ú® –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
    plt.title(title, fontsize=16, fontweight="bold", color="white", pad=20)
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–ú–∏–Ω—É—Ç—ã (–Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ)" if mode == "minutes" else "–¶–∏–∫–ª—ã (–Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ)")
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%d.%m.%y"))
    plt.xticks(rotation=45)
    if plt.gca().get_legend_handles_labels()[1]:
        plt.legend(loc="upper left", fontsize=9)
    plt.grid(False)
    plt.subplots_adjust(bottom=0.2, top=0.85)
    plt.text(0.5, 1.04, "#sadhana_bot", fontsize=9, alpha=0.4, color="gray", ha="center", transform=plt.gca().transAxes)

    # üì§ –°–æ—Ö—Ä–∞–Ω—è–µ–º
    buffer = BytesIO()
    plt.savefig(buffer, format="png")
    buffer.seek(0)
    plt.close()

    return BufferedInputFile(buffer.read(), filename="chart.png")
