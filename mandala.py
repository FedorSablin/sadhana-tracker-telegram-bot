import aiosqlite
from aiogram import types
from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from datetime import date, datetime, timedelta
from db import DB_PATH
from aiogram import Bot, Router
from mandala_agent import mandala_mgr
bot: Bot | None = None

router = Router()

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–∂–∏–º–∞ –º–∞–Ω–¥–∞–ª—ã
class MandalaStates(StatesGroup):
    choosing_practice   = State()
    choosing_start         = State()   # ‚¨ÖÔ∏è –ù–û–í–û–ï
    waiting_for_custom_dt  = State()
    choosing_mode       = State()

# mandala.py
from datetime import date, timedelta


async def fill_missing_mandala_days(mandala_id: int, mode: str, start_date: date, db: aiosqlite.Connection | None = None):
    own_conn = False
    if db is None:
        db = await aiosqlite.connect(DB_PATH)
        own_conn = True

    sessions_per_day = 2 if mode == "40x2" else 1
    today = date.today()

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–Ω–µ—Å—ë–Ω–Ω—ã–π –¥–µ–Ω—å –º–∞–Ω–¥–∞–ª—ã
    cur = await db.execute("SELECT MAX(date) FROM mandala_days WHERE mandala_id = ?", (mandala_id,))
    last_date_row = await cur.fetchone()
    last_date_str = last_date_row[0] if last_date_row else None
    last_date = date.fromisoformat(last_date_str) if last_date_str else None

    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å –¥–∞—Ç—ã –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –∏–ª–∏ —Å –¥–∞—Ç—ã —Å—Ç–∞—Ä—Ç–∞ –º–∞–Ω–¥–∞–ª—ã, –µ—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç
    fill_start = last_date + timedelta(days=1) if last_date else start_date

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –¥–Ω–∏ –æ—Ç fill_start –¥–æ —Å–µ–≥–æ–¥–Ω—è –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
    day = fill_start
    while day <= today:
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        await db.execute("""
            INSERT OR IGNORE INTO mandala_days (mandala_id, date, sessions)
            VALUES (?, ?, ?)
        """, (mandala_id, day.isoformat(), sessions_per_day))
        day += timedelta(days=1)

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - —Å—É–º–º–∞ —Å–µ—Å—Å–∏–π
    cur = await db.execute("SELECT SUM(sessions) FROM mandala_days WHERE mandala_id = ?", (mandala_id,))
    progress = (await cur.fetchone())[0] or 0
    await db.execute("UPDATE mandalas SET progress = ? WHERE id = ?", (progress, mandala_id))

    await db.commit()

    if own_conn:
        await db.close()

# 1. –ö–æ–º–∞–Ω–¥–∞ /mandala ‚Äî –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–∫—Ç–∏–∫—É
@router.message(Command("mandala"))
async def cmd_mandala(message: Message, state: FSMContext):
    # –ë–µ—Ä—ë–º –≤—Å–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Å —Ñ–ª–∞–≥–æ–º mandala_flag
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT name FROM practices WHERE mandala_flag=1")
        rows = await cur.fetchall()
    if not rows:
        return await message.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫ –¥–ª—è –º–∞–Ω–¥–∞–ª—ã.")
    # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–ø–∏—Å–∫–æ–º —Ä—è–¥–æ–≤
    inline_keyboard = [[InlineKeyboardButton(pr, callback_data=f"mandala_practice:{pr}")] for (pr,) in rows]
    kb = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫—É –¥–ª—è –º–∞–Ω–¥–∞–ª—ã:", reply_markup=kb)
    await state.set_state(MandalaStates.choosing_practice)

# 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫—É
@router.callback_query(
    lambda c: c.data.startswith("mandala_practice:"),
    MandalaStates.choosing_practice
)
async def mandala_practice(call: CallbackQuery, state: FSMContext):
    await call.answer()
    practice = call.data.split(":", 1)[1]
    await state.update_data(mandala_practice=practice)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è",      callback_data="mandala_start:today")],
        [InlineKeyboardButton(text="üóì –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", callback_data="mandala_start:custom")]
    ])

    await call.message.answer(
        f"–ö–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º –ú–∞–Ω–¥–∞–ª—É –ø–æ ¬´{practice.capitalize()}¬ª?",
        reply_markup=kb
    )
    await state.set_state(MandalaStates.choosing_start)


@router.callback_query(lambda c: c.data == "mandala_start:today", MandalaStates.choosing_start)
async def mandala_start_today(call: CallbackQuery, state: FSMContext):
    from datetime import date
    await call.answer()
    await state.update_data(mandala_start=date.today().isoformat())
    data = await state.get_data()
    await send_mandala_mode_keyboard(call.message, data["mandala_practice"], state)


@router.callback_query(lambda c: c.data == "mandala_start:custom", MandalaStates.choosing_start)
async def mandala_start_custom(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –º–∞–Ω–¥–∞–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD.\n"
        "–í—Å–µ –¥–Ω–∏ –º–µ–∂–¥—É —ç—Ç–æ–π –¥–∞—Ç–æ–π –∏ —Å–µ–≥–æ–¥–Ω—è –±—É–¥—É—Ç –∑–∞—Å—á–∏—Ç–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
        "–ú—ã –≤–µ—Ä–∏–º –≤ –≤–∞—à—É —á–µ—Å—Ç–Ω–æ—Å—Ç—å üôè"
    )
    await state.set_state(MandalaStates.waiting_for_custom_dt)

@router.message(MandalaStates.waiting_for_custom_dt)
async def mandala_save_custom_date(message: Message, state: FSMContext):
    import datetime as dt, re
    txt = message.text.strip()
    if not re.fullmatch(r"\d{4}-\d{2}-\d{2}", txt):
        return await message.answer("‚ùå –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã YYYY-MM-DD, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    try:
        start = dt.date.fromisoformat(txt)
    except ValueError:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    if start > dt.date.today():
        return await message.answer("‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.")

    await state.update_data(mandala_start=start.isoformat())
    data = await state.get_data()
    await send_mandala_mode_keyboard(message, data["mandala_practice"], state)


async def send_mandala_mode_keyboard(msg_obj, practice: str, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="40 –¥–Ω–µ–π √ó 2/–¥–µ–Ω—å", callback_data="mandala_mode:40x2")],
        [InlineKeyboardButton(text="90 –¥–Ω–µ–π √ó 1/–¥–µ–Ω—å", callback_data="mandala_mode:90x1")]
    ])
    await msg_obj.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ú–∞–Ω–¥–∞–ª—ã –¥–ª—è ¬´{practice.capitalize()}¬ª:",
        reply_markup=kb
    )
    await state.set_state(MandalaStates.choosing_mode)




# 3+4.2 –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞, —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
@router.callback_query(lambda c: c.data and c.data.startswith("mandala_mode:"))
async def mandala_mode(call: CallbackQuery, state: FSMContext):
    _, mode = call.data.split(':', 1)
    data = await state.get_data()
    practice = data['mandala_practice']
    start = date.fromisoformat(data['mandala_start'])

    async with aiosqlite.connect(DB_PATH) as db:
        mid = await mandala_mgr.start(
            uid=str(call.from_user.id),
            practice=practice,
            start_dt=start,
            mode=mode,
            db=db
        )
        cur = await db.execute("SELECT progress,total FROM mandalas WHERE id=?", (mid,))
        prog, total = await cur.fetchone()

    await call.message.answer(
        f"‚úÖ –ú–∞–Ω–¥–∞–ª–∞ –¥–ª—è ¬´{practice.capitalize()}¬ª –∑–∞–ø—É—â–µ–Ω–∞: {prog}/{total}"
    )
    await state.clear()


async def tail_consecutive_days(db, mandala_id: int,
                                required_sessions: int) -> int:
    """
    –°—á–∏—Ç–∞–µ—Ç –ø–æ–¥—Ä—è–¥-–¥–Ω–µ–π –° –ö–û–ù–¶–ê (–æ—Ç —Å–∞–º–æ–π –ø–æ–∑–¥–Ω–µ–π –¥–∞—Ç—ã –∫ –±–æ–ª–µ–µ —Ä–∞–Ω–Ω–∏–º).
    """
    cur = await db.execute(
        "SELECT date, sessions FROM mandala_days "
        "WHERE mandala_id = ? ORDER BY date DESC",
        (mandala_id,))
    rows = await cur.fetchall()                 # –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã DESC
    counter = 0
    expected = None

    for date_str, sess in rows:
        d = date.fromisoformat(date_str)
        if expected is None:
            # –ø–µ—Ä–≤–∞—è (—Å–∞–º–∞—è –ø–æ–∑–¥–Ω—è—è) –∑–∞–ø–∏—Å–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
            expected = d
        if d != expected or sess < required_sessions:
            break                               # —Ü–µ–ø–æ—á–∫–∞ –ø–æ—Ä–≤–∞–ª–∞—Å—å
        counter += 1
        expected = d - timedelta(days=1)        # –∂–¥—ë–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å

    return counter


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ bot.py)
def register_mandala_handlers(dp: Dispatcher):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ bot.py. –ü—Ä–æ—Å—Ç–æ –≤–µ—à–∞–µ—Ç router –ú–∞–Ω–¥–∞–ª—ã
    –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π Dispatcher.
    """
    dp.include_router(router)


# –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
register_session_callbacks = register_mandala_handlers