import aiosqlite
from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from datetime import date
from db import DB_PATH
from aiogram import Bot, Router
from mandala_agent import mandala_mgr
bot: Bot | None = None

router = Router()

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–∂–∏–º–∞ –º–∞–Ω–¥–∞–ª—ã
class MandalaStates(StatesGroup):
    choosing_practice   = State()
    choosing_start         = State()   # ‚¨ÖÔ∏è –ù–û–í–û–ï
    waiting_for_custom_dt  = State()
    choosing_mode       = State()


# 1. –ö–æ–º–∞–Ω–¥–∞ /mandala ‚Äî –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–∫—Ç–∏–∫—É
@router.message(Command("mandala"))
async def cmd_mandala(message: Message, state: FSMContext):
    # –ë–µ—Ä—ë–º –≤—Å–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Å —Ñ–ª–∞–≥–æ–º mandala_flag
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT name FROM practices WHERE mandala_flag=1")
        rows = await cur.fetchall()
    if not rows:
        return await message.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫ –¥–ª—è –º–∞–Ω–¥–∞–ª—ã.")
    # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–ø–∏—Å–∫–æ–º —Ä—è–¥–æ–≤
    inline_keyboard = [[InlineKeyboardButton(pr, callback_data=f"mandala_practice:{pr}")] for (pr,) in rows]
    kb = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫—É –¥–ª—è –º–∞–Ω–¥–∞–ª—ã:", reply_markup=kb)
    await state.set_state(MandalaStates.choosing_practice)

# 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫—É
@router.callback_query(
    lambda c: c.data.startswith("mandala_practice:"),
    MandalaStates.choosing_practice
)
async def mandala_practice(call: CallbackQuery, state: FSMContext):
    await call.answer()
    practice = call.data.split(":", 1)[1]
    await state.update_data(mandala_practice=practice)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è",      callback_data="mandala_start:today")],
        [InlineKeyboardButton(text="üóì –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", callback_data="mandala_start:custom")]
    ])

    await call.message.answer(
        f"–ö–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º –ú–∞–Ω–¥–∞–ª—É –ø–æ ¬´{practice.capitalize()}¬ª?",
        reply_markup=kb
    )
    await state.set_state(MandalaStates.choosing_start)


@router.callback_query(lambda c: c.data == "mandala_start:today", MandalaStates.choosing_start)
async def mandala_start_today(call: CallbackQuery, state: FSMContext):
    from datetime import date
    await call.answer()
    await state.update_data(mandala_start=date.today().isoformat())
    data = await state.get_data()
    await send_mandala_mode_keyboard(call.message, data["mandala_practice"], state)


@router.callback_query(lambda c: c.data == "mandala_start:custom", MandalaStates.choosing_start)
async def mandala_start_custom(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –º–∞–Ω–¥–∞–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD.\n"
        "–í—Å–µ –¥–Ω–∏ –º–µ–∂–¥—É —ç—Ç–æ–π –¥–∞—Ç–æ–π –∏ —Å–µ–≥–æ–¥–Ω—è –±—É–¥—É—Ç –∑–∞—Å—á–∏—Ç–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
        "–ú—ã –≤–µ—Ä–∏–º –≤ –≤–∞—à—É —á–µ—Å—Ç–Ω–æ—Å—Ç—å üôè"
    )
    await state.set_state(MandalaStates.waiting_for_custom_dt)

@router.message(MandalaStates.waiting_for_custom_dt)
async def mandala_save_custom_date(message: Message, state: FSMContext):
    import datetime as dt, re
    txt = message.text.strip()
    if not re.fullmatch(r"\d{4}-\d{2}-\d{2}", txt):
        return await message.answer("‚ùå –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã YYYY-MM-DD, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    try:
        start = dt.date.fromisoformat(txt)
    except ValueError:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    if start > dt.date.today():
        return await message.answer("‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.")

    await state.update_data(mandala_start=start.isoformat())
    data = await state.get_data()
    await send_mandala_mode_keyboard(message, data["mandala_practice"], state)


async def send_mandala_mode_keyboard(msg_obj, practice: str, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="40 –¥–Ω–µ–π √ó 2/–¥–µ–Ω—å", callback_data="mandala_mode:40x2")],
        [InlineKeyboardButton(text="90 –¥–Ω–µ–π √ó 1/–¥–µ–Ω—å", callback_data="mandala_mode:90x1")]
    ])
    await msg_obj.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ú–∞–Ω–¥–∞–ª—ã –¥–ª—è ¬´{practice.capitalize()}¬ª:",
        reply_markup=kb
    )
    await state.set_state(MandalaStates.choosing_mode)




# 3+4.2 –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞, —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
@router.callback_query(lambda c: c.data and c.data.startswith("mandala_mode:"))
async def mandala_mode(call: CallbackQuery, state: FSMContext):
    _, mode = call.data.split(':', 1)
    data = await state.get_data()
    practice = data['mandala_practice']
    start = date.fromisoformat(data['mandala_start'])

    async with aiosqlite.connect(DB_PATH) as db:
        mid = await mandala_mgr.start(
            uid=str(call.from_user.id),
            practice=practice,
            start_dt=start,
            mode=mode,
            db=db
        )
        cur = await db.execute("SELECT progress,total FROM mandalas WHERE id=?", (mid,))
        prog, total = await cur.fetchone()

    await call.message.answer(
        f"‚úÖ –ú–∞–Ω–¥–∞–ª–∞ –¥–ª—è ¬´{practice.capitalize()}¬ª –∑–∞–ø—É—â–µ–Ω–∞: {prog}/{total}"
    )
    await state.clear()


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ bot.py)
def register_mandala_handlers(dp: Dispatcher):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ bot.py. –ü—Ä–æ—Å—Ç–æ –≤–µ—à–∞–µ—Ç router –ú–∞–Ω–¥–∞–ª—ã
    –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π Dispatcher.
    """
    dp.include_router(router)


# –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
register_session_callbacks = register_mandala_handlers