import asyncio
import os
import json
import random
import aiosqlite
import pytz
import logging
import asyncio
import re
import datetime as dt 
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import CommandStart
from aiogram.filters import Command, StateFilter
from aiogram.types import Message
from aiogram.types import FSInputFile
from aiogram.types import BufferedInputFile
from aiogram.types import BotCommand
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.client.default import DefaultBotProperties
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from aiogram import F, Router
from dotenv import load_dotenv
from collections import defaultdict
from datetime import datetime, timedelta, date, timezone
from difflib import get_close_matches
from db import init_db, save_practice_log, get_user_practices_with_cycles
from db import DB_PATH
from mandala_agent import MandalaManager
mandala_mgr = MandalaManager()
from charts import build_chart
from mandala import register_mandala_handlers  # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏ –≤—Ç–æ—Ä–æ–µ –∏–º—è
from mandala import MandalaStates, tail_consecutive_days
from mandala import register_session_callbacks
from zoneinfo import ZoneInfo, ZoneInfoNotFoundError


# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª .env!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
from mandala import bot as mandala_bot
mandala_bot = bot

# —Å–æ–∑–¥–∞—ë–º –∏ —Å—Ç–∞—Ä—Ç—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = AsyncIOScheduler()

# 4) –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
praise = [
    "üëè –û—Ç–ª–∏—á–Ω–æ! –°–µ–≥–æ–¥–Ω—è —Ç—ã —Å–¥–µ–ª–∞–ª(–∞) —Å–≤–æ—é –∑–∞–ø–∏—Å—å ‚Äî —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!\n\n- –£–≤–∏–¥–µ—Ç—å —Å–≤–æ–π –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é /progress\n- –í–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –≥—Ä–∞—Ñ–∏–∫–∞ /chart",
    "üéâ –ú–æ–ª–æ–¥–µ—Ü, —Ç—ã –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ—à—å –ø—Ä–∞–∫—Ç–∏–∫—É!\n\n- –£–≤–∏–¥–µ—Ç—å —Å–≤–æ–π –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é /progress\n- –í–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –≥—Ä–∞—Ñ–∏–∫–∞ /chart",
    "üí™ –¢–≤–æ—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!\n\n- –£–≤–∏–¥–µ—Ç—å —Å–≤–æ–π –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é /progress\n- –í–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –≥—Ä–∞—Ñ–∏–∫–∞ /chart",
    "üî• –°—É–ø–µ—Ä-—É—Å–ø–µ—Ö! –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥–µ —É–∫—Ä–µ–ø–ª—è–µ—Ç –ø—Ä–∏–≤—ã—á–∫—É.\n\n- –£–≤–∏–¥–µ—Ç—å —Å–≤–æ–π –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é /progress\n- –í–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –≥—Ä–∞—Ñ–∏–∫–∞ /chart",
    "üåü –¢—ã —Å–¥–µ–ª–∞–ª(–∞) —ç—Ç–æ! –ó–∞–≤—Ç—Ä–∞ –ø–æ–ø—Ä–æ–±—É–π —á—É—Ç–æ—á–∫—É –¥–æ–±–∞–≤–∏—Ç—å.\n\n- –£–≤–∏–¥–µ—Ç—å —Å–≤–æ–π –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é /progress\n- –í–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –≥—Ä–∞—Ñ–∏–∫–∞ /chart"
]
reminds = [
    "üëã –ù–µ –∑–∞–±—É–¥—å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è ‚Äî —ç—Ç–æ –≤–∞–∂–Ω–æ!\n\n- –ï—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª–∏ –ø—Ä–∞–∫—Ç–∏–∫—É —Å–µ–≥–æ–¥–Ω—è, —Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–¥–µ–ª–∞–π—Ç–µ! –ö–∞–∫ —Å–¥–µ–ª–∞–µ—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–∏, –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—É—Ç —á–µ—Ä–µ–∑ /log",
    "‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ —Å–æ–∑–¥–∞—ë—Ç —Å–∏–ª—É –≤–æ–ª–∏!\n\n- –ï—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª–∏ –ø—Ä–∞–∫—Ç–∏–∫—É —Å–µ–≥–æ–¥–Ω—è, —Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–¥–µ–ª–∞–π—Ç–µ! –ö–∞–∫ —Å–¥–µ–ª–∞–µ—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–∏, –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—É—Ç —á–µ—Ä–µ–∑ /log",
    "üìå –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥–µ –ø–æ–º–æ–≥–∞–µ—Ç –≤–∏–¥–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å!\n\n- –ï—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª–∏ –ø—Ä–∞–∫—Ç–∏–∫—É —Å–µ–≥–æ–¥–Ω—è, —Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–¥–µ–ª–∞–π—Ç–µ! –ö–∞–∫ —Å–¥–µ–ª–∞–µ—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–∏, –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—É—Ç —á–µ—Ä–µ–∑ /log",
    "üîî –ú–∞–ª–µ–Ω—å–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏ –ø—Ä–∞–∫—Ç–∏–∫—É –∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–π –µ—ë.\n\n- –ï—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª–∏ –ø—Ä–∞–∫—Ç–∏–∫—É —Å–µ–≥–æ–¥–Ω—è, —Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–¥–µ–ª–∞–π—Ç–µ! –ö–∞–∫ —Å–¥–µ–ª–∞–µ—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–∏, –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—É—Ç —á–µ—Ä–µ–∑ /log",
    "üí° –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å ‚Äî –∫–ª—é—á –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É.\n\n- –ï—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª–∏ –ø—Ä–∞–∫—Ç–∏–∫—É —Å–µ–≥–æ–¥–Ω—è, —Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–¥–µ–ª–∞–π—Ç–µ! –ö–∞–∫ —Å–¥–µ–ª–∞–µ—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–∏, –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—É—Ç —á–µ—Ä–µ–∑ /log"
]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_daily(user_id: str):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute(
            "SELECT timezone, notify_hour, notify_min FROM users WHERE user_id = ?",
            (user_id,)
        )
        row = await cur.fetchone()

    tz_name, h, m = row or ("UTC", 19, 0)
    tz = safe_zoneinfo(tz_name)
    today = datetime.now(tz).date().isoformat()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute(
            "SELECT 1 FROM logs WHERE user_id = ? AND date = ? LIMIT 1",
            (user_id, today)
        )
        did_log = await cur.fetchone() is not None

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    if did_log:
        text = random.choice(praise) + "\n–ó–∞–≤—Ç—Ä–∞ –ø–æ–ø—Ä–æ–±—É–π —Å–¥–µ–ª–∞—Ç—å –Ω–∞ 1% –±–æ–ª—å—à–µ –∏ –Ω–∞–±–ª—é–¥–∞–π –º–∞–≥–∏—é –ø—Ä–µ–æ–±—Ä–∞–∂–µ–Ω–∏—è!"
    else:
        text = random.choice(reminds)

    text += f"\n\n–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å: /log –∏–ª–∏ /log {today}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(chat_id=int(user_id), text=text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def schedule_daily_notification(user_id: str):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute(
            "SELECT timezone, notify_hour, notify_min FROM users WHERE user_id = ?",
            (user_id,)
        )
        row = await cur.fetchone()
    
    tz_name, h, m = row if row else ("UTC", 19, 0)
     
    try:
        tz = ZoneInfo(tz_name)
    except ZoneInfoNotFoundError:
        # –ø—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ¬´–ø–æ–¥–ª–µ—á–∏—Ç—å¬ª —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        import pytz
        tz = safe_zoneinfo(tz_name)
        # –∏ —Å—Ä–∞–∑—É –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–µ –∏–º—è –≤ –ë–î
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("UPDATE users SET timezone = ? WHERE user_id = ?", (tz.key, user_id))
            await db.commit()   

    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–æ–π
    trigger = CronTrigger(hour=h, minute=m, timezone=tz)

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.add_job(
        send_daily,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º send_daily –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        trigger,
        args=[user_id],  # –ü–µ—Ä–µ–¥–∞–µ–º user_id
        id=f"notify_{user_id}",
        replace_existing=True  # –ó–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É —Å —Ç–∞–∫–∏–º ID
    )


@dp.callback_query(lambda c: c.data == "log", StateFilter("*"))
async def cb_log_menu(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ñ–∏–∫—Å–∞—Ü–∏–∏:",
        reply_markup=build_log_menu_keyboard()
    )
    await state.clear()

@dp.callback_query(lambda c: c.data == "chart")
async def cb_chart(call: CallbackQuery):
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º "–∫—Ä—É—Ç–∏–ª–∫—É" –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    await call.answer()
    # –í—ã–∑—ã–≤–∞–µ–º —Ç–æ—Ç –∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —á—Ç–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –≤–≤–æ–¥–µ /chart
    await get_chart_main_menu(call.message)



# –ö–Ω–æ–ø–∫–∞ ‚Üí –≤—ã–±–æ—Ä: ¬´–º–∏–Ω—É—Ç—ã¬ª –∏–ª–∏ ¬´—Ü–∏–∫–ª—ã¬ª
@dp.callback_query(lambda c: c.data.startswith("chart_practice:"))
async def handle_chart_mode_selection(call: CallbackQuery):
    parts = call.data.split(":")
    if len(parts) != 3:
        await call.message.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞.")
        return

    mode, practice_name = parts[1], parts[2]
    user_id = str(call.from_user.id)

    file = await build_chart(user_id, mode=mode, practice=practice_name)
    if file:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        await call.message.answer_photo(file, caption=f"–ì—Ä–∞—Ñ–∏–∫ –ø–æ {mode} –¥–ª—è ¬´{practice_name.capitalize()}¬ª", reply_markup=keyboard)
    else:
        await call.message.answer(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–∞–∫—Ç–∏–∫–µ ¬´{practice_name.capitalize()}¬ª.")

# ‚Äî‚Äî‚Äî –æ–Ω–±–æ—Ä–¥–∏–Ω–≥: –®–∞–≥‚ÄØ5¬†‚Üí¬†—Ñ–∏–Ω–∞–ª (99) ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
    user_id = str(call.from_user.id)
    if await get_onboarding_step(user_id) == 5:
        await set_onboarding_step(user_id, 99)
        await call.message.answer(
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤–≤–æ–¥–Ω–∞—è —á–∞—Å—Ç—å –ø—Ä–æ–π–¥–µ–Ω–∞!\n"
            "–¢–µ–ø–µ—Ä—å —Ç—ã —É–º–µ–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–∞–∫—Ç–∏–∫–∏, –≤–µ—Å—Ç–∏ –ª–æ–≥–∏, —Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏.\n"
            "–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π ‚Äî –∫–æ–º–∞–Ω–¥–∞ /help –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ ¬´–°–ø—Ä–∞–≤–∫–∞¬ª."
        )


# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
@dp.callback_query(lambda c: c.data.startswith("chart_build:"))
async def send_selected_chart(call: CallbackQuery):
    _, mode, practice = call.data.split(":")
    user_id = str(call.from_user.id)

    chart = await build_chart(user_id, mode=mode, practice=practice)

    if chart:
        caption = f"üìà {'–ú–∏–Ω—É—Ç—ã' if mode == 'minutes' else '–¶–∏–∫–ª—ã'} –ø–æ ¬´{practice.capitalize()}¬ª"
        await call.message.answer_photo(chart, caption=caption)
    else:
        await call.message.answer(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–∞–∫—Ç–∏–∫–µ ¬´{practice.capitalize()}¬ª")

    await call.answer()

@dp.callback_query(lambda c: c.data.startswith("chart_mode_"))
async def chart_practice_by_mode(call: CallbackQuery):
    user_id = str(call.from_user.id)
    parts = call.data.split(":")
    
    if len(parts) != 2:
        await call.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –∫–æ–º–∞–Ω–¥—ã.")
        return

    mode = parts[0].replace("chart_mode_", "")  # "minutes" –∏–ª–∏ "cycles"
    practice = parts[1]

    file = await build_chart(user_id, mode=mode, practice=practice)
    
    if file:
        caption = f"–ì—Ä–∞—Ñ–∏–∫ –ø–æ {'–º–∏–Ω—É—Ç–∞–º' if mode == 'minutes' else '—Ü–∏–∫–ª–∞–º'} –¥–ª—è ¬´{practice.capitalize()}¬ª"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        await call.message.answer_photo(file, caption=caption, reply_markup=keyboard)
    else:
        await call.message.answer(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–∞–∫—Ç–∏–∫–µ ¬´{practice.capitalize()}¬ª.")


# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥/–í –º–µ–Ω—é"
@dp.callback_query(F.data == "back_to_main", StateFilter("*"))
async def back_to_main(call: CallbackQuery, state: FSMContext):   # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏ state
    await state.clear()                                           # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
    await start_handler(call.message, state)   


@dp.callback_query(lambda c: c.data == "help")
async def cb_help(call: CallbackQuery):
    await call.answer()
    await help_command(call.message)

@dp.message(Command("help"))
async def help_command(message: Message):
    await message.answer(
        "üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Sadhana_bot</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É —Ç–µ–∫—Å—Ç–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ /–∫–æ–º–∞–Ω–¥–∞, –≤—ã–±—Ä–∞—Ç—å –≤ –ú–µ–Ω—é –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ\n"
        "üîπ <b>/log</b> ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∞–∫—Ç–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ (—Å–µ–≥–æ–¥–Ω—è, –≤—á–µ—Ä–∞, –¥—Ä—É–≥–∞—è –¥–∞—Ç–∞)\n"
        "üîπ <b>/progress</b> ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ –¥–Ω—è–º\n"
        "üîπ <b>/chart</b> ‚Äî —É–≤–∏–¥–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –ø—Ä–∞–∫—Ç–∏–∫–∞–º\n"
        "üîπ <b>/mandala</b> ‚Äî —Ä–µ–∂–∏–º ¬´üåÄ –ú–∞–Ω–¥–∞–ª–∞¬ª\n"
        "üîπ <b>/addpractice</b> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø—Ä–∞–∫—Ç–∏–∫—É\n"
        "üîπ <b>/deletepractice</b> ‚Äî —É–¥–∞–ª–∏—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É\n"
        "üîπ <b>/mypractices</b> ‚Äî —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫\n"
        "üîπ <b>/setnotifytime HH:MM</b> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n"
        "‚ú® –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∏–∞–ª–æ–≥–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–ª–µ–¥—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º\n"
        "üõ°Ô∏è –î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –∏ –Ω–∏–∫—É–¥–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è\n\n"
        "üôè –ñ–µ–ª–∞—é —è—Å–Ω–æ–π –∏ –≥–ª—É–±–æ–∫–æ–π —Å–∞–¥—Ö–∞–Ω—ã!",
        parse_mode=ParseMode.HTML
    )

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏—é
def get_motivation(total_days: int, streak: int, last_date: str) -> str:
    from datetime import datetime

    last = datetime.strptime(last_date, "%Y-%m-%d")
    days_since_last = (datetime.now() - last).days

    # === 1. "–í –ø–æ—Ç–æ–∫–µ"
    in_flow = [
        "üåä –¢—ã –Ω–∞ –≤–æ–ª–Ω–µ! –ü—Ä–æ–¥–æ–ª–∂–∞–π ‚Äî –∏–º–µ–Ω–Ω–æ –≤ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å–∏–ª–∞.",
        "üî• –°—Ç—Ä–∏–∫ –¥–µ—Ä–∂–∏—Ç—Å—è! –î–µ–ª–∞–π –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –∏ –ø—É—Ç—å –ø—Ä–æ–π–¥–µ–Ω.",
        "üíé –¢—ã —É–∂–µ –≥–ª—É–±–∂–µ, —á–µ–º 90% –ª—é–¥–µ–π. –°–æ—Ö—Ä–∞–Ω–∏ —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.",
        "üßò‚Äç‚ôÇÔ∏è –¢—ã –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è ‚Äî –∑–Ω–∞—á–∏—Ç –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.",
        "üèóÔ∏è –¢—ã —Å—Ç—Ä–æ–∏—à—å –Ω–∞—Å—Ç–æ—è—â–µ–µ ‚Äî —à–∞–≥ –∑–∞ —à–∞–≥–æ–º. –ò —É —Ç–µ–±—è –ø–æ–ª—É—á–∞–µ—Ç—Å—è.",
        "üí™ –ù–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ ‚Äî —ç—Ç–æ —É–∂–µ –Ω–µ –º–æ—Ç–∏–≤–∞—Ü–∏—è. –≠—Ç–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä.",
        "üöÄ –ü–æ–∫–∞ –¥—Ä—É–≥–∏–µ –Ω–∞—á–∏–Ω–∞—é—Ç –∑–∞–Ω–æ–≤–æ ‚Äî —Ç—ã –∏–¥—ë—à—å –≤–ø–µ—Ä—ë–¥. –£–≤–∞–∂–µ–Ω–∏–µ!",
        "üß± –ö–∞–∂–¥—ã–π –¥–µ–Ω—å —É–∫—Ä–µ–ø–ª—è–µ—Ç —Ç–µ–±—è. –ù–µ –æ—Ç–ø—É—Å–∫–∞–π —ç—Ç–æ—Ç –ø–æ—Ç–æ–∫.",
        "üå± –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –¥–∞—ë—Ç —Ç–µ–±–µ —Å–∏–ª—É. –¢—ã —ç—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å.",
        "üéØ –¢—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ—à—å ‚Äî —Ç—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è –ø—Ä–∞–∫—Ç–∏–∫–æ–π."
    ]

    # === 2. "–ü–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞"
    after_break = [
        "üîÑ –ò–Ω–æ–≥–¥–∞ –ø–∞—É–∑–∞ ‚Äî —ç—Ç–æ —Ç–æ–∂–µ —á–∞—Å—Ç—å –ø—É—Ç–∏. –ì–ª–∞–≤–Ω–æ–µ ‚Äî —Ç—ã –≤–µ—Ä–Ω—É–ª—Å—è. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ üôå",
        "üß≠ –ù–µ –≤–∞–∂–Ω–æ, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Ç—ã –≤—ã–ø–∞–ª. –í–∞–∂–Ω–æ, —á—Ç–æ —Ç—ã —Å–Ω–æ–≤–∞ –Ω–∞ –∫–æ–≤—Ä–∏–∫–µ.",
        "üå§Ô∏è –ú–∏—Ä –∂–¥—ë—Ç —Ç–≤–æ—é –ø—Ä–∞–∫—Ç–∏–∫—É. –ù–µ –æ—Å—Ç–∞–≤–ª—è–π –µ—ë –Ω–∞–¥–æ–ª–≥–æ.",
        "üîã –ö–∞–∂–¥–æ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —É–∫—Ä–µ–ø–ª—è–µ—Ç —Ç–µ–±—è –±–æ–ª—å—à–µ, —á–µ–º —Ç—ã –¥—É–º–∞–µ—à—å.",
        "üö∂‚Äç‚ôÇÔ∏è –¢—ã —Å–Ω–æ–≤–∞ –∑–¥–µ—Å—å ‚Äî —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –ø—Ä–∞–∫—Ç–∏–∫–∞ –≤–∞–∂–Ω–∞ –¥–ª—è —Ç–µ–±—è.",
        "üí° –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚Äî –≤–∞–∂–Ω–µ–µ, —á–µ–º –Ω–∞—á–∞—Ç—å. –¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏.",
        "üîÅ –û—Ç–ø—É—Å—Ç–∏–ª ‚Äî –Ω–æ –≤–µ—Ä–Ω—É–ª—Å—è. –≠—Ç–æ —Ç–æ–∂–µ —Å–∏–ª–∞.",
        "üïäÔ∏è –ù–∏–∫–∞–∫–æ–π –≤–∏–Ω—ã. –¢–æ–ª—å–∫–æ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—É–ø–µ–Ω—å.",
        "üåßÔ∏è –°–ª–æ–∂–Ω–æ—Å—Ç–∏ –±—ã–ª–∏? –û—Ç–ª–∏—á–Ω–æ. –°–µ–π—á–∞—Å –±—É–¥–µ—Ç –ª–µ–≥—á–µ.",
        "üèÅ –ü–∞—É–∑–∞ –ø–æ–∑–∞–¥–∏. –í–ø–µ—Ä—ë–¥ ‚Äî –æ–¥–∏–Ω –¥–µ–Ω—å –∑–∞ –¥—Ä—É–≥–∏–º."
    ]

    # === 3. "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏"
    just_started = [
        "üå± –¢—ã —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª ‚Äî –∏ —É–∂–µ –¥–µ–ª–∞–µ—à—å –≤–∞–∂–Ω—ã–π —à–∞–≥. –ü—Ä–æ–¥–æ–ª–∂–∞–π!",
        "üõ§Ô∏è –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–æ–∂–¥–∞–µ—Ç—Å—è —Å –º–∞–ª–æ–≥–æ. –¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏.",
        "üöÄ –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å ‚Äî —Å–∞–º—ã–π —Ü–µ–Ω–Ω—ã–π. –¢—ã –µ–≥–æ –ø—Ä–æ—à—ë–ª üí•",
        "üß± –ö–∞–∂–¥–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ ‚Äî –∫–∏—Ä–ø–∏—á–∏–∫ –≤ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã.",
        "üåü –°–µ–≥–æ–¥–Ω—è —Ç—ã –∑–∞–ª–æ–∂–∏–ª –Ω–æ–≤—É—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é –∂–∏–∑–Ω–∏.",
        "ü´∂ –ù–∞—á–∞–ª ‚Äî –∑–Ω–∞—á–∏—Ç –≤—ã–±—Ä–∞–ª —Å–µ–±—è. –≠—Ç–æ —É–∂–µ –ø–æ–±–µ–¥–∞.",
        "üß© –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è ‚Äî –æ–Ω–∞ —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è. –¢—ã –Ω–∞—á–∞–ª —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å.",
        "ü¶∂ –ù–µ –≥–æ–Ω–∏—Å—å. –ü—Ä–æ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—è–π. –≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç.",
        "üèóÔ∏è –ù–∞—á–∞–ª–æ –ø–æ–ª–æ–∂–µ–Ω–æ. –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ—Å—Ç–æ –∏–¥—Ç–∏.",
        "üåº –ú–∞–ª–µ–Ω—å–∫–æ–µ ‚Äî –∑–Ω–∞—á–∏—Ç –Ω–∞—Å—Ç–æ—è—â–µ–µ. –ù–∞—á–∞–ª–æ ‚Äî —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ."
    ]

    # === 4. "–û–ø—ã—Ç–Ω—ã–µ"
    long_term = [
        "üßò‚Äç‚ôÄÔ∏è –¢–≤–æ—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å ‚Äî —ç—Ç–æ —É–∂–µ –Ω–µ –ø—Ä–∏–≤—ã—á–∫–∞. –≠—Ç–æ —á–∞—Å—Ç—å —Ç–µ–±—è.",
        "üåä –¢—ã –≤–∏–¥–∏—à—å, –∫–∞–∫ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è —ç—Ñ—Ñ–µ–∫—Ç? –°—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≥–ª—É–±–∂–µ.",
        "üåü –¢–æ, —á—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å, —É–∂–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–≤–æ—é –∂–∏–∑–Ω—å. –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π.",
        "üìà –≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞. –≠—Ç–æ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ —Ç–≤–æ–µ–π —Å–∏–ª—ã.",
        "üéñÔ∏è –¢—ã –¥–µ—Ä–∂–∏—à—å —Ç–µ–º–ø ‚Äî —ç—Ç–æ —Ä–µ–¥–∫–æ—Å—Ç—å. –£–≤–∞–∂–µ–Ω–∏–µ!",
        "üéØ –¢—ã –≤ —Ç–æ–º –ø—Ä–æ—Ü–µ–Ω—Ç–µ, –∫—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏–ª.",
        "üßò –¢—ã –ø–µ—Ä–µ—à—ë–ª –ø–æ—Ä–æ–≥, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º —É–∂–µ –Ω–µ –º–æ—Ç–∏–≤–∞—Ü–∏—è, –∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ.",
        "üí´ –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å ‚Äî —ç—Ç–æ —É–∂–µ —Å–∏—Å—Ç–µ–º–∞. –£ —Ç–µ–±—è –æ–Ω–∞ –µ—Å—Ç—å.",
        "üèîÔ∏è –ù–∞–∫–æ–ø–∏–ª–æ—Å—å. –ó–∞–∫—Ä–µ–ø–∏–ª–æ—Å—å. –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç–∞—Ç—å.",
        "üî• –¢—ã –¥–µ–ª–∞–µ—à—å —ç—Ç–æ –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É. –ò —ç—Ç–æ –≤–∏–¥–Ω–æ."
    ]

    if total_days <= 3:
        return random.choice(just_started)
    elif days_since_last >= 2:
        return random.choice(after_break)
    elif streak >= 3:
        return random.choice(in_flow)
    elif total_days >= 10:
        return random.choice(long_term)
    else:
        return "–¢—ã –¥–≤–∏–∂–µ—à—å—Å—è –≤–ø–µ—Ä—ë–¥. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–π üôå"

# FSM: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class PracticeStates(StatesGroup):
    waiting_for_practices = State()
    waiting_for_practices_log = State()
    waiting_for_log = State()
    waiting_for_cycles_flag = State()  # ‚¨ÖÔ∏è —Å–ø—Ä–∞—à–∏–≤–∞–µ–º, –µ—Å—Ç—å –ª–∏ —Ü–∏–∫–ª—ã
    waiting_for_minutes = State()      # ‚úÖ –¥–ª—è /log
    waiting_for_cycles = State()
    waiting_for_date = State()
    selecting_practice = State()       # ‚úÖ –¥–ª—è /log
class AddPracticeStates(StatesGroup):
    name = State()
    has_cycles = State()
    waiting_for_name = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∞–∫—Ç–∏–∫–∏
class NotifyStates(StatesGroup):
    waiting_for_time = State()
class TZStates(StatesGroup):
    waiting_for_tz = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart(), StateFilter("*"))
async def start_handler(message: Message, state: FSMContext):
    await state.clear()
    user_id = str(message.from_user.id)
    # 1) —É–∑–Ω–∞—ë–º, –≥–¥–µ —é–∑–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–µ
    step = await get_onboarding_step(user_id)  # üëà —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ –®–∞–≥–∞‚ÄØ1

    # 2) —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É", callback_data="log")],
        [InlineKeyboardButton(text="üìà –ü—Ä–æ–≥—Ä–µ—Å—Å / –ì—Ä–∞—Ñ–∏–∫", callback_data="chart")],
        [InlineKeyboardButton(text="üåÄ –ú–∞–Ω–¥–∞–ª–∞", callback_data="mandala_menu")],
        [InlineKeyboardButton(text="üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data="help")] +
        ([] if step >= 99 else [InlineKeyboardButton(text="üöÄ –ü—Ä–æ–π—Ç–∏ –≤–≤–æ–¥–Ω—ã–π –∫—É—Ä—Å", callback_data="onb_start")])
    ])

    await message.answer(
        "üßò‚Äç‚ôÇÔ∏è <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Sadhana_bot!</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ —Å–≤–æ–µ–π —Å–∞–¥—Ö–∞–Ω—ã ‚Äî –ø—Ä–æ—Å—Ç–æ, —É–¥–æ–±–Ω–æ –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ.\n\n"
        "üîπ –§–∏–∫—Å–∏—Ä—É–π –ø—Ä–∞–∫—Ç–∏–∫–∏ —Å –ø–æ–º–æ—â—å—é /log\n"
        "üîπ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ /progress\n"
        "üîπ –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–π —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å –ø–æ–º–æ—â—å—é –≥—Ä–∞—Ñ–∏–∫–∞ /chart\n"
        "üîπ –î–æ–±–∞–≤–ª—è–π –Ω–æ–≤—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ /addpractice\n"
        "üîπ –°–º–æ—Ç—Ä–∏ —Å–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏: /mypractices\n\n"
        "üìå –ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.\n\n"
        "‚ú® –ñ–µ–ª–∞—é –≥–ª—É–±–æ–∫–æ–π –∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏!üôè",
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )

    # 1) –î–æ–±–∞–≤–ª—è–µ–º —é–∑–µ—Ä–∞ (–µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç) —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º UTC
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT OR IGNORE INTO users(user_id) VALUES(?)", (user_id,)
        )
        await db.commit()

    # 2) –ü–ª–∞–Ω–∏—Ä—É–µ–º –µ–º—É –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await schedule_daily_notification(user_id)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Onboarding helpers
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def get_onboarding_step(user_id: str) -> int:
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute(
            "SELECT onboarding_step FROM users WHERE user_id = ?",
            (user_id,)
        )
        row = await cur.fetchone()

    # row[0] –º–æ–∂–µ—Ç –±—ã—Ç—å None  ‚Üí  –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
    return int(row[0] or 0) if row else 0


async def set_onboarding_step(user_id: str, step: int) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —à–∞–≥–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞.
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ¬†99, —á—Ç–æ–±—ã –ø–æ–º–µ—Ç–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫—É—Ä—Å–∞.
    """
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "UPDATE users SET onboarding_step = ? WHERE user_id = ?",
            (step, user_id)
        )
        await db.commit()

# --- —Å—Ç–∞—Ä—Ç –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ -------------------------------------------------
@dp.callback_query(lambda c: c.data == "onb_start")
async def onb_start(call: CallbackQuery):
    await call.answer()          # —É–±–∏—Ä–∞–µ–º ¬´—á–∞—Å–∏–∫–∏¬ª
    uid = str(call.from_user.id)
    # –µ—Å–ª–∏ –∫—É—Ä—Å —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω, –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∑—ã–≤–∞–µ–º—Å—è
    if await get_onboarding_step(uid) >= 99:
        await call.message.answer(
            "–¢—ã —É–∂–µ –ø—Ä–æ—à—ë–ª –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ üéâ\n"
            "–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ ‚Äî /help."
        )
        return

    await set_onboarding_step(uid, 1)
    await call.message.answer(
        "–®–∞–≥¬†1‚ÄØ/‚ÄØ6. –î–∞–≤–∞–π —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–∏–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.\n"
        "–ù–∞–∂–º–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /settimezone –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –µ–µ –≤ —á–∞—Ç–µ."
    )

def build_practices_keyboard(practices: list[str]) -> InlineKeyboardMarkup:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É 2√óN —Å –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏."""
    buttons = [
        InlineKeyboardButton(text=p.capitalize(),
                             callback_data=f"log_select:{p}")
        for p in practices
    ]
    # –ø–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
    rows = [buttons[i:i+2] for i in range(0, len(buttons), 2)]
    return InlineKeyboardMarkup(inline_keyboard=rows)

# –ö–æ–º–∞–Ω–¥–∞ /practices ‚Äî –Ω–∞—á–∞–ª–æ –≤–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞
@dp.message(Command(commands=["practices"]), StateFilter("*"))
async def practices_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –º–µ–¥–∏—Ç–∞—Ü–∏—è, –ø—Ä–∞–Ω–∞—è–º–∞, —á—Ç–µ–Ω–∏–µ):"
    )
    await state.set_state(PracticeStates.waiting_for_practices)

@dp.message(PracticeStates.waiting_for_practices)
async def process_practice_list(message: Message, state: FSMContext):
    practices = [p.strip().lower() for p in message.text.split(",") if p.strip()]

    if not practices:
        await message.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    await state.update_data(practices=practices, current_index=0, result={})
    current = practices[0]
    await message.answer(
    f"–£ –ø—Ä–∞–∫—Ç–∏–∫–∏ ¬´{current.capitalize()}¬ª –µ—Å—Ç—å —Ü–∏–∫–ª—ã? (–¥–∞ / –Ω–µ—Ç)\n\n"
    "üåÄ <b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> –í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –°—É—Ä—å—è –ö—Ä–∏–π—è, –ö–∞–ø–∞–ª–∞–±—Ö–∞—Ç–∏ –≤ –®–ß–ö) "
    "–≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ü–∏–∫–ª—ã. –ï—Å–ª–∏ –≤—ã –±—É–¥–µ—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, "
    "—è —Å–º–æ–≥—É —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ. "
    "–ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω—ã ‚Äî –æ—Ç–≤–µ—Ç—å—Ç–µ ¬´–Ω–µ—Ç¬ª.",
    parse_mode=ParseMode.HTML
    )
    await state.set_state(PracticeStates.waiting_for_cycles_flag)

@dp.message(PracticeStates.waiting_for_cycles_flag)
async def process_cycles_flag(message: Message, state: FSMContext):
    answer = message.text.strip().lower()
    yes_variants = ["–¥–∞", "yes", "y"]
    no_variants = ["–Ω–µ—Ç", "no", "n"]

    if answer not in yes_variants + no_variants:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ ¬´–¥–∞¬ª –∏–ª–∏ ¬´–Ω–µ—Ç¬ª üôÇ")
        return

    data = await state.get_data()
    practices = data["practices"]
    index = data["current_index"]
    result = data["result"]

    current = practices[index]
    result[current] = {"has_cycles": answer in yes_variants}

    index += 1

    if index < len(practices):
        next_practice = practices[index]
        await state.update_data(current_index=index, result=result)
        await message.answer(
        f"–£ –ø—Ä–∞–∫—Ç–∏–∫–∏ ¬´{next_practice.capitalize()}¬ª –µ—Å—Ç—å —Ü–∏–∫–ª—ã? (–¥–∞ / –Ω–µ—Ç)\n\n"
        "üåÄ <i>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</i> –í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –°—É—Ä—å—è –ö—Ä–∏–π—è, –ö–∞–ø–∞–ª–∞–±—Ö–∞—Ç–∏) "
        "–≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ü–∏–∫–ª—ã. –ï—Å–ª–∏ –≤—ã –±—É–¥–µ—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, "
        "—è —Å–º–æ–≥—É —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ. "
        "–ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω—ã ‚Äî –æ—Ç–≤–µ—Ç—å—Ç–µ ¬´–Ω–µ—Ç¬ª.",
        parse_mode="HTML"
)
    else:

        # –§–∏–Ω–∞–ª ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        user_id = str(message.from_user.id)

        async with aiosqlite.connect(DB_PATH) as db:
            for name, props in result.items():
                has_cycles = props.get("has_cycles", False)
                await db.execute(
                    "INSERT OR IGNORE INTO practices (user_id, name, has_cycles, is_active) VALUES (?, ?, ?, 1)",
                    (user_id, name, has_cycles)
                )
            await db.commit()


        formatted = "\n".join(
            f"‚Ä¢ {p.capitalize()} ‚Äî {'—Å —Ü–∏–∫–ª–∞–º–∏' if v['has_cycles'] else '–±–µ–∑ —Ü–∏–∫–ª–æ–≤'}"
            for p, v in result.items()
        )

        await message.answer(f"‚úÖ –ü—Ä–∞–∫—Ç–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n{formatted}")
        await state.clear()

@dp.message(Command("mypractices"), StateFilter("*"))
async def show_my_practices(message: Message, state: FSMContext):
    await state.clear()
    user_id = str(message.from_user.id)

    async with aiosqlite.connect(DB_PATH) as db:
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        pr_rows = await db.execute_fetchall(
            "SELECT name FROM practices WHERE user_id=? AND is_active=1",
            (user_id,)
        )

        # –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞–Ω–¥–∞–ª—ã
        mandalas_rows = await db.execute_fetchall(
            "SELECT id, practice, total, mode FROM mandalas WHERE user_id=? AND is_active=1",
            (user_id,)
        )

        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        mandala_info = {}
        for mid, practice, total, mode in mandalas_rows:
            sessions_per_day = 2 if mode == "40x2" else 1
            progress = await get_mandala_progress(db, mid, sessions_per_day)
            mandala_info[practice.lower()] = (progress, total)

    if not pr_rows:
        return await message.answer(
            "üòï –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫. "
            "–î–æ–±–∞–≤—å—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ /addpractice."
        )

    lines = ["üßò <b>–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏:</b>"]
    for (name,) in pr_rows:
        key = name.lower()
        if key in mandala_info:
            prog, tot = mandala_info[key]
            lines.append(f"‚Ä¢ {name.capitalize()} üéØ (–ú–∞–Ω–¥–∞–ª–∞: {prog}/{tot})")
        else:
            lines.append(f"‚Ä¢ {name.capitalize()}")

    await message.answer("\n".join(lines), parse_mode="HTML")


async def start_log_flow(msg_obj, user_id: str, state: FSMContext, log_date: date):
    """
    msg_obj ‚Äì –º–æ–∂–µ—Ç –±—ã—Ç—å Message –∏–ª–∏ CallbackQuery.message
    """
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute(
            "SELECT name, has_cycles FROM practices "
            "WHERE user_id = ? AND is_active = 1",
            (user_id,)
        )
        rows = await cur.fetchall()

    if not rows:
        await msg_obj.answer("‚ö†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫. –î–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ /addpractice.")
        return

    available = {name.lower(): bool(has_cycles) for name, has_cycles in rows}
    await state.update_data(
        log_date=log_date,
        available_practices=available
    )

    kb = build_practices_keyboard(list(available.keys()))
    pretty_date = log_date.strftime("%d.%m.%Y")
    await msg_obj.answer(
        f"üëã –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã–ø–æ–ª–Ω–∏–ª–∏ {pretty_date}:",
        reply_markup=kb
    )
    await state.set_state(PracticeStates.selecting_practice)


def build_log_menu_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="log_today")],
        [InlineKeyboardButton(text="üìÜ –í—á–µ—Ä–∞",   callback_data="log_yesterday")],
        [InlineKeyboardButton(text="üóìÔ∏è –î—Ä—É–≥–∞—è –¥–∞—Ç–∞", callback_data="log_date")],
    ])

# –°—Ç–∞—Ä—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message(Command(commands=["log"]), StateFilter("*"))
async def log_menu(message: types.Message, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞: —Å–µ–≥–æ–¥–Ω—è, –≤—á–µ—Ä–∞, –¥—Ä—É–≥–∞—è –¥–∞—Ç–∞.
    –î–∞–ª—å–Ω–µ–π—à–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –≤ callback-—Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö.
    """
    await state.clear()                               # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º FSM
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∞–∫—Ç–∏–∫–∏:",
        reply_markup=build_log_menu_keyboard()
    )

# 6.1  ¬´–°–µ–≥–æ–¥–Ω—è¬ª
@dp.callback_query(lambda c: c.data == "log_today", StateFilter("*"))
async def cb_log_today(call: CallbackQuery, state: FSMContext):
    await call.answer()
    user_id = str(call.from_user.id)
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π ¬´—Å–µ–≥–æ–¥–Ω—è¬ª
    user_tz = await get_user_tz(user_id)           # —Å–º. —É—Ç–∏–ª–∏—Ç—É –Ω–∏–∂–µ
    today = datetime.now(user_tz).date()
    await start_log_flow(call.message, user_id, state, today)

# 6.2  ¬´–í—á–µ—Ä–∞¬ª
@dp.callback_query(lambda c: c.data == "log_yesterday", StateFilter("*"))
async def cb_log_yesterday(call: CallbackQuery, state: FSMContext):
    await call.answer()
    user_id = str(call.from_user.id)
    user_tz = await get_user_tz(user_id)
    yesterday = datetime.now(user_tz).date() - timedelta(days=1)
    await start_log_flow(call.message, user_id, state, yesterday)

# 6.3  ¬´–î—Ä—É–≥–∞—è –¥–∞—Ç–∞¬ª (–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç)
@dp.callback_query(lambda c: c.data == "log_date", StateFilter("*"))
async def cb_log_date(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
    await state.set_state(PracticeStates.waiting_for_date)

@dp.message(PracticeStates.waiting_for_date)
async def process_log_date(message: types.Message, state: FSMContext):
    try:
        log_date = datetime.strptime(message.text.strip(), "%Y-%m-%d").date()
    except ValueError:
        await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ (YYYY-MM-DD).")
        return

    user_id = str(message.from_user.id)
    await start_log_flow(message, user_id, state, log_date)


@dp.callback_query(
    lambda c: c.data.startswith("log_select:"),
    PracticeStates.selecting_practice
)
async def handle_log_select(call: types.CallbackQuery, state: FSMContext):
    await call.answer()                         # —É–±–∏—Ä–∞–µ–º ¬´–∫—Ä—É—Ç–∏–ª–∫—É¬ª
    practice = call.data.split(":", 1)[1].lower()

    data = await state.get_data()
    has_cycles = data["available_practices"][practice]

    # –∫–ª–∞–¥—ë–º –≤—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–µ
    await state.update_data(
        log_practices=[practice],
        unknown_practices=[],
        current_index=0,
        log_data={},
        saved_practices={practice: has_cycles}
    )

    await call.message.answer(
        f"‚è±Ô∏è –°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ ¬´{practice.capitalize()}¬ª?"
    )
    await state.set_state(PracticeStates.waiting_for_minutes)

async def get_user_tz(user_id: str):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute(
            "SELECT timezone FROM users WHERE user_id = ?", (user_id,)
        )
        row = await cur.fetchone()
    return safe_zoneinfo(row[0] if row else "UTC")


# ---------------------------------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–∞–∫—Ç–∏–∫, –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ /log
# ---------------------------------------------------------------------------
@dp.message(
    PracticeStates.waiting_for_practices_log,
    ~F.text.startswith("/")          # –∫–æ–º–∞–Ω–¥—ã ("/progress", "/menu", ‚Ä¶) –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
)
async def process_log_practices_list(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)

    # 1. –ü–∞—Ä—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
    input_raw       = message.text.lower()
    input_practices = [p.strip() for p in input_raw.split(",") if p.strip()]

    # 2. –î–æ—Å—Ç–∞—ë–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            "SELECT name, has_cycles FROM practices "
            "WHERE user_id = ? AND is_active = 1",
            (user_id,)
        )
        rows = await cursor.fetchall()

    if not rows:
        await message.answer(
            "‚ö†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ /addpractice."
        )
        await state.clear()
        return

    # {–∏–º—è_–ø—Ä–∞–∫—Ç–∏–∫–∏: has_cycles}
    known_practices = {name.lower(): bool(has_cycles) for name, has_cycles in rows}

    # 3. –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–≤–æ–¥ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏
    valid_practices   = []
    unknown_practices = []

    for p in input_practices:
        # 3‚Äëa. –°—Ç—Ä–æ–≥–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if p in known_practices:
            valid_practices.append(p)
            continue

        # 3‚Äëb. ¬´–ü–æ—Ö–æ–∂–µ–µ¬ª —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (cutoff = 0.8)
        match = get_close_matches(p, known_practices.keys(), n=1, cutoff=0.8)
        if match:
            valid_practices.append(match[0])
        else:
            unknown_practices.append(p)

    if not valid_practices:
        await message.answer(
            "‚ö†Ô∏è –ù–∏ –æ–¥–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞ –Ω–µ —Å–æ–≤–ø–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /log."
        )
        await state.clear()
        return

    # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç–∞–π–º–∏–Ω–≥–∞
    await state.update_data(
        log_practices=valid_practices,
        unknown_practices=unknown_practices,
        current_index=0,
        log_data={},
        saved_practices=known_practices
    )

    await message.answer(
        f"‚è±Ô∏è –°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ ¬´{valid_practices[0].capitalize()}¬ª?"
    )
    await state.set_state(PracticeStates.waiting_for_minutes)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
@dp.message(PracticeStates.waiting_for_minutes)
async def ask_minutes(message: types.Message, state: FSMContext):
    # –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏ –¥–∞—ë–º –µ–π –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–Ω—ã–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º
    if message.text.startswith("/"):
        return
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç —á–∏—Å–ª–æ–º.")
        return

    minutes = int(message.text)
    data = await state.get_data()
    i = data["current_index"]
    practices = data["log_practices"]
    log = data["log_data"]
    saved = data["saved_practices"]

    current = practices[i]
    log[current] = {"minutes": minutes}

    await state.update_data(log_data=log)

    if saved.get(current, False):
        await message.answer(f"üîÅ –°–∫–æ–ª—å–∫–æ —Ü–∏–∫–ª–æ–≤ –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ ¬´{current.capitalize()}¬ª?")
        await state.set_state(PracticeStates.waiting_for_cycles)
    else:
        await move_to_next_practice(state, message)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
@dp.message(PracticeStates.waiting_for_cycles)
async def ask_cycles(message: types.Message, state: FSMContext):
    # –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
    if message.text.startswith("/"):
        return
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ —á–∏—Å–ª–æ–º.")
        return

    cycles = int(message.text)
    data = await state.get_data()
    i = data["current_index"]
    practices = data["log_practices"]
    log = data["log_data"]

    current = practices[i]
    log[current]["cycles"] = cycles

    await state.update_data(log_data=log)
    await move_to_next_practice(state, message)

def build_practices_keyboard(practices: list[str]) -> InlineKeyboardMarkup:
    buttons = [
        InlineKeyboardButton(text=p.capitalize(),
                             callback_data=f"log_select:{p}")
        for p in practices
    ]
    # + –∫–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    buttons.append(
        InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="log_done")
    )


    rows = [buttons[i:i+2] for i in range(0, len(buttons), 2)]
    return InlineKeyboardMarkup(inline_keyboard=rows)


@dp.callback_query(lambda c: c.data == "log_done",
                   StateFilter(PracticeStates.selecting_practice))
async def cb_log_finish(call: CallbackQuery, state: FSMContext):
    await call.answer()
    data = await state.get_data()
    saved = data.get("saved_counter", 0)

    if saved:
        await call.message.answer(f"‚úÖ –ó–∞–ø–∏—Å–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–æ: {saved}\n–°–ø–∞—Å–∏–±–æ! üôå")
    else:
        await call.message.answer("–ó–∞–ø–∏—Å–µ–π –Ω–µ –±—ã–ª–æ.")

    # –æ–Ω–±–æ—Ä–¥–∏–Ω–≥: –ø–µ—Ä–µ–≤–æ–¥–∏–º 3 ‚Üí 4 (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    user_id = str(call.from_user.id)
    if await get_onboarding_step(user_id) == 3:
        await set_onboarding_step(user_id, 4)
        await call.message.answer(
            "–®–∞–≥ 4 / 6. –ü–æ—Å–º–æ—Ç—Ä–∏–º –æ–±—â—É—é –∫–∞—Ä—Ç–∏–Ω—É ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ /progress."
        )

    await state.clear()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–∞–∫—Ç–∏–∫–µ
async def move_to_next_practice(state: FSMContext, message: Message):
    from datetime import datetime

    fsm_data   = await state.get_data()
    i          = fsm_data["current_index"] + 1          # –∏–Ω–¥–µ–∫—Å —Å–ª–µ–¥—É—é—â–µ–π –∏–∑ log_practices
    practices  = fsm_data["log_practices"]
    log_date   = fsm_data.get("log_date", datetime.now().date())
    user_id    = str(message.from_user.id)
    log_data   = fsm_data.get("log_data", {})           # {'–π–æ–≥–∞': {'minutes':15, ...}}

    # 1.  –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ, —á—Ç–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤–≤–µ–ª–∏
    if log_data:                                        # –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ
        now        = datetime.now()
        today_str  = log_date.strftime("%Y-%m-%d")
        timestamp  = now.isoformat()

        async with aiosqlite.connect(DB_PATH) as db:
            for practice, entry in log_data.items():
                minutes = entry.get("minutes")
                cycles  = entry.get("cycles")

                # ‚îÄ‚îÄ 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ ‚Äî
                await db.execute("""
                    INSERT INTO logs (user_id, date, practice, minutes, cycles, timestamp)
                    VALUES (?, ?, ?, ?, ?, ?)
                """, (user_id, today_str, practice, minutes, cycles, timestamp))

                # ‚îÄ‚îÄ 2. –ü–µ—Ä–µ–¥–∞—ë–º –∑–∞–ø–∏—Å—å –º–µ–Ω–µ–¥–∂–µ—Ä—É –º–∞–Ω–¥–∞–ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                status = await mandala_mgr.log(user_id, practice, log_date, db=db)
                if status == "reset":
                    await message.answer(
                        "‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, –≤—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –¥–µ–Ω—å ‚Äî "
                        "–ú–∞–Ω–¥–∞–ª–∞ –æ–±–Ω—É–ª–∏–ª–∞—Å—å –∏ –Ω–∞—á–∞–ª–∞—Å—å –∑–∞–Ω–æ–≤–æ."
                    )
                elif status == "ok":
                    cur = await db.execute(
                        "SELECT progress, total FROM mandalas WHERE user_id=? AND LOWER(practice)=? AND is_active=1",
                        (user_id, practice.lower())
                    )
                    row = await cur.fetchone()
                    if row:
                        prog, total = row
                        await message.answer(f"üéØ –ú–∞–Ω–¥–∞–ª–∞ –ø–æ ¬´{practice.capitalize()}¬ª: {prog}/{total}")
                elif status == "no_active":
                    pass   
            await db.commit()

        # —Å—á—ë—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        saved = fsm_data.get("saved_counter", 0) + len(log_data)
        await state.update_data(saved_counter=saved)

    # 2.  –ì–æ—Ç–æ–≤—ã –ª–∏ –º—ã –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–∞–∫—Ç–∏–∫–µ?
    if i < len(practices):
        # —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–∫—Ç–∏–∫ –ø—Ä–∏—à—ë–ª –∏–∑ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
        await state.update_data(current_index=i, log_data={})   # –æ—á–∏—â–∞–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–π
        await message.answer(
            f"‚è±Ô∏è –°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ ¬´{practices[i].capitalize()}¬ª?"
        )
        await state.set_state(PracticeStates.waiting_for_minutes)
        return

    # 3.  –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –±–æ–ª—å—à–µ –Ω–µ—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–Ω–æ–≤–∞
    await state.update_data(
        current_index=0,
        log_practices=[],
        log_data={}                       # –æ—á–∏—Å—Ç–∫–∞
    )
    kb = build_practices_keyboard(
        list(fsm_data["available_practices"].keys())
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ì–æ—Ç–æ–≤–æ¬ª:",
        reply_markup=kb
    )
    await state.set_state(PracticeStates.selecting_practice)

        

@dp.message(Command("skiponboarding"), StateFilter("*"))
async def skip_onboarding_cmd(message: Message, state: FSMContext):
    await state.clear()
    uid = str(message.from_user.id)
    await set_onboarding_step(uid, 99)
    await message.answer(
        "–û–Ω–±–æ—Ä–¥–∏–Ω–≥ –ø—Ä–æ–ø—É—â–µ–Ω. –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π ‚Äî /help."
    )

TIMEZONE_LIST = [
    "Europe/Kaliningrad", "Europe/Moscow", "Europe/Samara",
    "Asia/Yekaterinburg", "Asia/Omsk", "Asia/Krasnoyarsk",
    "Asia/Irkutsk", "Asia/Yakutsk", "Asia/Vladivostok",
    "Asia/Sakhalin", "Asia/Kamchatka"
]

def build_timezone_keyboard() -> InlineKeyboardMarkup:
    buttons = []
    now = datetime.now(timezone.utc)  # <-- –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ timezone-aware

    for tz_name in TIMEZONE_LIST:
        try:
            tz = ZoneInfo(tz_name)
            offset_sec = tz.utcoffset(now).total_seconds()
            hours = int(offset_sec // 3600)
            minutes = int((offset_sec % 3600) // 60)
            if minutes == 0:
                offset_str = f"UTC{hours:+d}"
            else:
                offset_str = f"UTC{hours:+d}:{abs(minutes):02d}"
        except Exception:
            offset_str = "UTC?"

        btn_text = f"{tz_name} ({offset_str})"
        buttons.append(InlineKeyboardButton(text=btn_text, callback_data=f"timezone_select:{tz_name}"))

    rows = [buttons[i:i+2] for i in range(0, len(buttons), 2)]
    return InlineKeyboardMarkup(inline_keyboard=rows)



@dp.message(Command("settimezone"), StateFilter("*"))
async def cmd_set_timezone(message: Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id

    # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –†–æ—Å—Å–∏—é, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, –ë–µ–ª–∞—Ä—É—Å—å –∏ –ï–≤—Ä–æ–ø—É
    help_text = (
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞:</b>\n\n"
        "üá∑üá∫ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã:\n"
        "‚Ä¢ Europe/Kaliningrad¬†(–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥,¬†UTC¬†+2)\n"
        "‚Ä¢ Europe/Moscow¬†(–ú–æ—Å–∫–≤–∞,¬†UTC¬†+3)\n"
        "‚Ä¢ Europe/Samara¬†(–°–∞–º–∞—Ä–∞,¬†UTC¬†+4)\n"
        "‚Ä¢ Asia/Yekaterinburg¬†(–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥,¬†UTC¬†+5)\n"
        "‚Ä¢ Asia/Omsk¬†(–û–º—Å–∫,¬†UTC¬†+6)\n"
        "‚Ä¢ Asia/Krasnoyarsk¬†(–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫,¬†UTC¬†+7)\n"
        "‚Ä¢ Asia/Irkutsk¬†(–ò—Ä–∫—É—Ç—Å–∫,¬†UTC¬†+8)\n"
        "‚Ä¢ Asia/Yakutsk¬†(–Ø–∫—É—Ç—Å–∫,¬†UTC¬†+9)\n"
        "‚Ä¢ Asia/Vladivostok¬†(–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫,¬†UTC¬†+10)\n"
        "‚Ä¢ Asia/Sakhalin¬†(–°–∞—Ö–∞–ª–∏–Ω,¬†UTC¬†+11)\n"
        "‚Ä¢ Asia/Kamchatka¬†(–ö–∞–º—á–∞—Ç–∫–∞,¬†UTC¬†+12)\n"
        "\n‚òùÔ∏è –ï—Å–ª–∏ –≤—ã –Ω–µ —É–∫–∞–∂–µ—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É, –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: "
        "`Europe/Moscow` (–ú–æ—Å–∫–≤–∞, UTC¬†+3)."
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    kb = build_timezone_keyboard()
    await message.answer(
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞:</b>\n\n"
        "–ï—Å–ª–∏ –≤–∞—à–µ–π –∑–æ–Ω—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –≤–≤–µ–¥–∏—Ç–µ –µ—ë –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: Europe/Moscow.",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
    await state.set_state(TZStates.waiting_for_tz)

@dp.callback_query(lambda c: c.data.startswith("timezone_select:"))
async def cb_timezone_select(call: CallbackQuery, state: FSMContext):
    tz = call.data.split(":", 1)[1]
    user_id = str(call.from_user.id)

    # 1. —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–æ–Ω—É
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "UPDATE users SET timezone = ? WHERE user_id = ?",
            (tz, user_id)
        )
        await db.commit()

    # 2. –ø–µ—Ä–µ–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await schedule_daily_notification(user_id)

    # 3. —Ñ–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    text = f"‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: <b>{tz}</b>."

    # 4. –æ–Ω–±–æ—Ä–¥–∏–Ω–≥: —à–∞–≥ 1 ‚Üí 2
    step = await get_onboarding_step(user_id)
    if step == 1:
        await set_onboarding_step(user_id, 2)
        text += (
            "\n\n<b>–®–∞–≥ 2 / 6. –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–∞–∫—Ç–∏–∫—É</b> üßò‚Äç‚ôÄÔ∏è\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /addpractice –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–µ –≤ —á–∞—Ç .\n"
        )

    # 5. –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await call.answer(show_alert=True)  # –∑–∞–∫—Ä—ã–≤–∞–µ–º ¬´—á–∞—Å–∏–∫–∏¬ª
    await call.message.edit_text(text, parse_mode=ParseMode.HTML)

    await state.clear()  # –æ—á–∏—Å—Ç–∏–ª–∏ FSM


def safe_zoneinfo(tz_name: str) -> ZoneInfo:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç ZoneInfo, –¥–∞–∂–µ –µ—Å–ª–∏ tz_name –Ω–∞–ø–∏—Å–∞–Ω
    –Ω–µ–≤–µ—Ä–Ω—ã–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º. –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–¥–∞—ë—Ç –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–µ –∏–º—è.
    """
    try:
        return ZoneInfo(tz_name)
    except ZoneInfoNotFoundError:
        # pytz –Ω–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É ‚Üí –ø–æ–ª—É—á–∞–µ–º –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–µ –∏–º—è
        fixed = pytz.timezone(tz_name).zone
        return ZoneInfo(fixed)


@dp.message(Command("setnotifytime"), StateFilter("*"))
async def cmd_set_notify(message: Message, state: FSMContext):
    await state.clear()
    # –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await message.answer("–í–æ —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ? (—Ñ–æ—Ä–º–∞—Ç HH:MM, 24-—á–∞—Å.)\n\n- –ï—Å–ª–∏ –≤—ã —É–∫–∞–∑–∞–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É —á–µ—Ä–µ–∑ /settimezone, —Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏–π–¥–µ—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ\n- –ï—Å–ª–∏ –≤—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É, —Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –¥–ª—è –≥.–ú–æ—Å–∫–≤–∞")
    await state.set_state(NotifyStates.waiting_for_time)

@dp.message(NotifyStates.waiting_for_time)
async def save_notify_time(message: Message, state: FSMContext):
    import re

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É HH:MM
    m = re.fullmatch(r"(\d{1,2}):(\d{2})", message.text.strip())
    
    # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
    if not m:
        return await message.answer("‚è∞ –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ HH:MM, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ —á–∏—Å–ª–∞
    h, m_ = map(int, m.groups())

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    if not (0 <= h <= 23 and 0 <= m_ <= 59):
        return await message.answer("–ß–∞—Å—ã 0-23, –º–∏–Ω—É—Ç—ã 0-59. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

    user_id = str(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT timezone FROM users WHERE user_id = ?", (user_id,))
        tz_row = await cur.fetchone()

        if not tz_row:
            # –ï—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ú–æ—Å–∫–≤–∞)
            tz_text = "Europe/Moscow"
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await db.execute("UPDATE users SET timezone = ? WHERE user_id = ?", (tz_text, user_id))
            await db.commit()
        else:
            tz_text = tz_row[0]  # –ï—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –∏–∑–≤–ª–µ–∫–∞–µ–º –µ—ë

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.execute(
            "UPDATE users SET notify_hour = ?, notify_min = ? WHERE user_id = ?",
            (h, m_, user_id)
        )
        await db.commit()

    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –Ω–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
    await schedule_daily_notification(user_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ {h:02d}:{m_:02d}.")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@dp.message(Command("deletelog"), StateFilter("*"))
async def cmd_delete_log(message: Message, state: FSMContext):
    await state.clear()
    user_id = str(message.from_user.id)
    parts = message.text.split(maxsplit=1)

    if len(parts) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deletelog YYYY-MM-DD")
        return

    date_str = parts[1].strip()
    try:
        dt.datetime.strptime(date_str, "%Y-%m-%d")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD.")
        return

    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute(
            """
            SELECT id, practice, minutes
            FROM logs
            WHERE user_id = ? AND date = ?
            """,
            (user_id, date_str)
        )
        rows = await cur.fetchall()

    if not rows:
        await message.answer(f"–ó–∞ {date_str} –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=f"‚ùå¬†{practice} ‚Äî¬†{mins}‚ÄØ–º–∏–Ω",
                callback_data=f"del_log:{row_id}"
            )] for row_id, practice, mins in rows
        ]
    )
    await message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å ({date_str}):",
        reply_markup=kb
    )

# ---- callback --------------------------------------------------------
@dp.callback_query(lambda c: c.data.startswith("del_log:"))
async def cb_delete_log(call: CallbackQuery):
    log_id = int(call.data.split(":")[1])

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("DELETE FROM logs WHERE id = ?", (log_id,))
        await db.commit()

    await call.answer("–£–¥–∞–ª–µ–Ω–æ ‚úÖ")      # –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback
    # —É–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É‚Äë–∫–Ω–æ–ø–∫—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    await call.message.edit_reply_markup(reply_markup=None)

# /deletepractice  ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–∫—Ç–∏–∫ –∏ –≤—ã–±—Ä–∞—Ç—å –ª–∏—à–Ω—é—é
@dp.message(Command("deletepractice"), StateFilter("*"))
async def cmd_delete_practice(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = str(message.from_user.id)

    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute(
            "SELECT id, name FROM practices "
            "WHERE user_id = ? AND is_active = 1",
            (user_id,)
        )
        rows = await cur.fetchall()

    if not rows:
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫.")

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=f"‚ùå¬†{pr_name.title()}",
                callback_data=f"del_pr:{pr_id}"
            )] for pr_id, pr_name in rows
        ]
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:",
        reply_markup=kb
    )

# -------------------------------------------------------------
# callback del_pr:<id> ‚Äì ¬´—Å–∫—Ä—ã—Ç—å¬ª –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É
# -------------------------------------------------------------
@dp.callback_query(lambda c: c.data.startswith("del_pr:"))
async def cb_delete_practice(call: types.CallbackQuery):
    pr_id = int(call.data.split(":")[1])
    user_id = str(call.from_user.id)

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "UPDATE practices SET is_active = 0 "
            "WHERE id = ? AND user_id = ?",
            (pr_id, user_id)
        )
        await db.commit()

    await call.answer("–ü—Ä–∞–∫—Ç–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∞ ‚úÖ")
    # —É–±–∏—Ä–∞–µ–º inline‚Äë–∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –µ—ë –Ω–µ–ª—å–∑—è –±—ã–ª–æ –Ω–∞–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
    await call.message.edit_reply_markup(reply_markup=None)


# === Mandala Command ===
@dp.message(Command("mandala"), StateFilter("*"))
async def cmd_mandala_menu(message: Message, state: FSMContext):
    await state.clear()
    """Handles the /mandala command to show the initial Mandala menu."""
    # First, check if the user has any practices defined.
    # We reuse the get_user_practices function defined later in the file.
    user_id = str(message.from_user.id)
    practices_dict = await get_user_practices(user_id) # Assuming get_user_practices returns a dict

    if not practices_dict:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø—Ä–∞–∫—Ç–∏–∫—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /addpractice, –ø—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∏–Ω–∞—Ç—å –ú–∞–Ω–¥–∞–ª—É.")
        return # Stop further execution if no practices

    # If practices exist, create the keyboard
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=p.capitalize(), callback_data=f"mandala_practice:{p}")]
            for p in practices_dict.keys() # Iterate through practice names (keys of the dict)
        ]
    )
    await message.answer("üåÄ <b>–†–µ–∂–∏–º ¬´–ú–∞–Ω–¥–∞–ª–∞¬ª</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –ú–∞–Ω–¥–∞–ª—É:", reply_markup=keyboard, parse_mode=ParseMode.HTML)
    # Set the state to wait for practice selection from the buttons
    await state.set_state(MandalaStates.choosing_practice)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  callback ¬´–ú–∞–Ω–¥–∞–ª–∞¬ª  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.callback_query(lambda c: c.data == "mandala_menu")
async def mandala_menu_callback(call: CallbackQuery, state: FSMContext):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –ú–∞–Ω–¥–∞–ª—ã –ø–æ –∫–ª–∏–∫—É –Ω–∞ inline‚Äë–∫–Ω–æ–ø–∫—É ¬´üåÄ –ú–∞–Ω–¥–∞–ª–∞¬ª.
    –õ–æ–≥–∏–∫–∞ —Ç–∞ –∂–µ, —á—Ç–æ —É –∫–æ–º–∞–Ω–¥—ã /mandala.
    """
    await call.answer()                       # —É–±–∏—Ä–∞–µ–º ¬´—á–∞—Å–∏–∫–∏¬ª
    # –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã
    await cmd_mandala_menu(call.message, state)


# –£—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
@dp.message(Command(commands=["progress"]), StateFilter("*"))
async def show_progress(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = str(message.from_user.id)

    async with aiosqlite.connect(DB_PATH) as db:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor = await db.execute("""
            SELECT date, practice, minutes, cycles FROM logs
            WHERE user_id = ?
        """, (user_id,))
        rows = await cursor.fetchall()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞–Ω–¥–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        mandalas_rows = await db.execute_fetchall(
            """
            SELECT id, practice, total, mode
            FROM mandalas
            WHERE user_id = ? AND is_active = 1
            """,
            (user_id,)
        )

        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –∫–∞–∂–¥–æ–π –º–∞–Ω–¥–∞–ª—ã
        mandala_info = {}
        for mid, practice, total, mode in mandalas_rows:
            sessions_per_day = 2 if mode == "40x2" else 1
            progress = await get_mandala_progress(db, mid, sessions_per_day)
            mandala_info[practice.lower()] = {"progress": progress, "total": total}

    if not rows:
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫—É —á–µ—Ä–µ–∑ /log")
        return

    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–≥–æ–≤ –ø–æ –¥–∞—Ç–∞–º –∏ –ø—Ä–∞–∫—Ç–∏–∫–∞–º (–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∞—à—É –ª–æ–≥–∏–∫—É)
    logs_by_date = {}
    for date_, practice, minutes, cycles in rows:
        if date_ not in logs_by_date:
            logs_by_date[date_] = {}
        logs_by_date[date_][practice] = {
            "minutes": minutes,
            "cycles": cycles or 0
        }

    log_dates = sorted(datetime.strptime(d, "%Y-%m-%d") for d in logs_by_date.keys())
    total_days = len(log_dates)
    last_date = log_dates[-1].strftime("%Y-%m-%d")

    streak = 1
    for i in range(len(log_dates) - 2, -1, -1):
        if (log_dates[i + 1] - log_dates[i]).days == 1:
            streak += 1
        else:
            break

    practice_stats = {}
    for day_log in logs_by_date.values():
        for name, data in day_log.items():
            p = name.lower()
            if p not in practice_stats:
                practice_stats[p] = {"count": 0, "minutes": 0, "cycles": 0}
            practice_stats[p]["count"] += 1
            practice_stats[p]["minutes"] += data.get("minutes", 0)
            practice_stats[p]["cycles"] += data.get("cycles", 0)

    top_practices = sorted(practice_stats.items(), key=lambda x: x[1]["count"], reverse=True)

    progress_text = (
        "üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å</b>\n\n"
        f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å: <b>{log_dates[0].strftime('%Y-%m-%d')}</b>\n"
        f"–í—Å–µ–≥–æ –¥–Ω–µ–π —Å –ø—Ä–∞–∫—Ç–∏–∫–æ–π: <b>{total_days}</b>\n"
        f"–î–Ω–µ–π –ø–æ–¥—Ä—è–¥ (–±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤): <b>{streak}</b>\n"
        f"–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏: <b>{last_date}</b>\n\n"
        f"<b>–¢–æ–ø –ø—Ä–∞–∫—Ç–∏–∫:</b>\n"
    )

    for name, stats in top_practices:
        line = f"‚Ä¢ {name.capitalize()} ‚Äî {stats['count']} —Ä–∞–∑ / {stats['minutes']} –º–∏–Ω"

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ mandala_info
        if name in mandala_info:
            m = mandala_info[name]
            line += f" üéØ <i>(–ú–∞–Ω–¥–∞–ª–∞: {m['progress']}/{m['total']})</i>"

        if stats['cycles']:
            line += f" / {stats['cycles']} —Ü–∏–∫–ª–æ–≤"

        progress_text += line + "\n"

    motivation = get_motivation(total_days, streak, last_date)
    progress_text += f"\n{motivation}"

    await message.answer(progress_text, parse_mode="HTML")


    # ‚Äî‚Äî‚Äî –æ–Ω–±–æ—Ä–¥–∏–Ω–≥: –®–∞–≥‚ÄØ4¬†‚Üí¬†5 ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
    user_id = str(message.from_user.id)
    if await get_onboarding_step(user_id) == 4:
        await set_onboarding_step(user_id, 5)
        await message.answer(
            "–®–∞–≥‚ÄØ5‚ÄØ/‚ÄØ6. –î–∞–≤–∞–π –ø–æ—Å—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫! –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ /chart."
        )

async def get_mandala_progress(db, mandala_id: int, sessions_per_day: int) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ –¥–Ω–µ–π, –∑–∞—á—Ç—ë–Ω–Ω—ã—Ö –≤ –º–∞–Ω–¥–∞–ª–µ.
    –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –¥–∞—Ç—ã, –≥–¥–µ –Ω–∞–±—Ä–∞–Ω–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π.
    """
    cur = await db.execute("""
        SELECT COUNT(*) FROM mandala_days
        WHERE mandala_id = ? AND sessions = ?
    """, (mandala_id, sessions_per_day))
    return (await cur.fetchone())[0]



@dp.message(Command("chart_menu"), StateFilter("*"))
async def show_chart_menu(message: Message, state: FSMContext):
    await state.clear()
    user_id = str(message.from_user.id)
    practices = await get_user_practices(user_id)

    if not practices:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫.")
        return

    # –ö–Ω–æ–ø–∫–∏ –ø–æ –ø—Ä–∞–∫—Ç–∏–∫–∞–º
    keyboard = InlineKeyboardMarkup()
    for name in practices:
        keyboard.add(InlineKeyboardButton(
            text=name.capitalize(),
            callback_data=f"chart_practice:{name}"
        ))

    await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–∞–∫—Ç–∏–∫—É –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞:", reply_markup=keyboard)


# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ –º–∏–Ω—É—Ç–∞–º
@dp.message(Command("chart"), StateFilter("*"))
async def get_chart_main_menu(message: Message, state: FSMContext):
    await state.clear()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìà –û–±—â–∏–π –≥—Ä–∞—Ñ–∏–∫ –ø–æ –º–∏–Ω—É—Ç–∞–º –¥–ª—è –≤—Å–µ—Ö –ø—Ä–∞–∫—Ç–∏–∫", callback_data="chart_all_minutes")],
        [InlineKeyboardButton(text="üîÅ –û–±—â–∏–π –≥—Ä–∞—Ñ–∏–∫ –ø–æ —Ü–∏–∫–ª–∞–º –¥–ª—è –≤—Å–µ—Ö –ø—Ä–∞–∫—Ç–∏–∫", callback_data="chart_all_cycles")],
        [InlineKeyboardButton(text="‚è± –ì—Ä–∞—Ñ–∏–∫ –ø–æ –º–∏–Ω—É—Ç–∞–º –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏", callback_data="chart_each_minutes")],
        [InlineKeyboardButton(text="üîÇ –ì—Ä–∞—Ñ–∏–∫ –ø–æ —Ü–∏–∫–ª–∞–º –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏", callback_data="chart_each_cycles")],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="back_to_main")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞:", reply_markup=keyboard)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
@dp.callback_query(lambda c: c.data.startswith("chart_"))
async def handle_chart_selection(call: CallbackQuery):
    await call.answer()
    user_id = str(call.from_user.id)

    if call.data == "chart_all_minutes":
        file = await build_chart(user_id, mode="minutes", each_practice=True)
        caption = "üìà –û–±—â–∏–π –≥—Ä–∞—Ñ–∏–∫ –ø–æ –º–∏–Ω—É—Ç–∞–º –¥–ª—è –≤—Å–µ—Ö –ø—Ä–∞–∫—Ç–∏–∫"
    elif call.data == "chart_all_cycles":
        file = await build_chart(user_id, mode="cycles", each_practice=True)
        caption = "üîÅ –û–±—â–∏–π –≥—Ä–∞—Ñ–∏–∫ –ø–æ —Ü–∏–∫–ª–∞–º –¥–ª—è –≤—Å–µ—Ö –ø—Ä–∞–∫—Ç–∏–∫"
    elif call.data == "chart_each_minutes":
        await send_chart_practice_selector(call, mode="minutes")
        return
    elif call.data == "chart_each_cycles":
        await send_chart_practice_selector(call, mode="cycles")
        return
    else:
        return

    if file:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        await call.message.answer_photo(file, caption=caption, reply_markup=keyboard)
    else:
        await call.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")

# –î–æ–±–∞–≤–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–∫—Ç–∏–∫–∏
async def send_chart_practice_selector(call: CallbackQuery, mode: str):
    user_id = str(call.from_user.id)

    practices = await get_user_practices_with_cycles(user_id) if mode == "cycles" else await get_user_practices(user_id)

    if not practices:
        await call.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for practice in practices:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=practice.capitalize(),
                callback_data=f"chart_practice:{mode}:{practice}"
            )
        ])

    await call.message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–∞–∫—Ç–∏–∫—É:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–∫—Ç–∏–∫–∏
@dp.callback_query(lambda c: c.data.startswith("chart_practice:"))
async def handle_practice_chart_selection(call: CallbackQuery):
    await call.answer()

    parts = call.data.split(":")
    if len(parts) == 3:
        # —Ñ–æ—Ä–º–∞—Ç: chart_practice:mode:practice
        _, mode, practice = parts
        user_id = str(call.from_user.id)

        chart = await build_chart(user_id, mode=mode, practice=practice)
        if chart:
            caption = f"{'‚è±' if mode == 'minutes' else 'üîÇ'} –ì—Ä–∞—Ñ–∏–∫ –ø–æ {'–º–∏–Ω—É—Ç–∞–º' if mode == 'minutes' else '—Ü–∏–∫–ª–∞–º'} –¥–ª—è ¬´{practice.capitalize()}¬ª"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="back_to_main")]
            ])
            await call.message.answer_photo(chart, caption=caption, reply_markup=keyboard)
        else:
            await call.message.answer(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–∞–∫—Ç–∏–∫–µ ¬´{practice.capitalize()}¬ª.")
    else:
        await call.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä–∞—Ñ–∏–∫–∞.")

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ —Ü–∏–∫–ª–∞–º
@dp.message(Command("chart_cycles"), StateFilter("*"))
async def send_cycles_chart(message: Message):
    user_id = str(message.from_user.id)
    chart = await build_chart(user_id, mode="cycles")

    if chart:
        await message.answer_photo(chart, caption="üìà –ì—Ä–∞—Ñ–∏–∫ —Ü–∏–∫–ª–æ–≤ –ø–æ –≤—Å–µ–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º")
    else:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ üôÅ")

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ –º–∏–Ω—É—Ç–∞–º
@dp.message(Command("chart_practice"), StateFilter("*"))
async def send_chart_for_practice(message: Message):
    user_id = str(message.from_user.id)
    args = message.text.split(maxsplit=1)

    if len(args) < 2:
        await message.answer("–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/chart_practice —à–∞–º–±—Ö–∞–≤–∏")
        return

    practice = args[1].strip().lower()
    chart = await build_chart(user_id, mode="minutes", practice=practice)

    if chart:
        await message.answer_photo(chart, caption=f"üìà –ì—Ä–∞—Ñ–∏–∫ –º–∏–Ω—É—Ç –¥–ª—è ¬´{practice.capitalize()}¬ª")
    else:
        await message.answer(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–∞–∫—Ç–∏–∫–µ ¬´{practice.capitalize()}¬ª")

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ –º–∏–Ω—É—Ç–∞–º
@dp.message(Command("chart_practice_cycles"), StateFilter("*"))
async def send_chart_cycles_practice(message: Message):
    user_id = str(message.from_user.id)
    args = message.text.split(maxsplit=1)

    if len(args) < 2:
        await message.answer("–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/chart_practice_cycles —à–∞–º–±—Ö–∞–≤–∏")
        return

    practice = args[1].strip().lower()
    chart = await build_chart(user_id, mode="cycles", practice=practice)

    if chart:
        await message.answer_photo(chart, caption=f"üìà –¶–∏–∫–ª—ã –ø–æ ¬´{practice.capitalize()}¬ª")
    else:
        await message.answer(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–∞–∫—Ç–∏–∫–µ ¬´{practice.capitalize()}¬ª")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def render_achievements(message: types.Message):
    user_id = str(message.from_user.id)
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("""
            SELECT practice, mode, start_date, end_date, total_days
            FROM achievements
            WHERE user_id = ?
            ORDER BY end_date DESC
        """, (user_id,))
        rows = await cur.fetchall()

    if not rows:
        return await message.answer(
            "üèÜ –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –º–∞–Ω–¥–∞–ª.\n"
            "–ö–æ–≥–¥–∞ –≤—ã –∑–∞–∫—Ä–æ–µ—Ç–µ –ø–µ—Ä–≤—É—é ‚Äî –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å!"
        )

    lines = []
    for pract, mode, start, end, total in rows:
        mode_disp = "40√ó2" if mode == "40x2" else "90√ó1"
        lines.append(
            f"üèÜ {pract.capitalize()} ‚Äî –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –º–∞–Ω–¥–∞–ª–∞ {mode_disp} "
            f"({start} ‚Üí {end})"
        )


    await message.answer(
        "üèÜ <b>–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>\n\n" + "\n".join(lines),
        parse_mode=ParseMode.HTML
    )

@dp.callback_query(lambda c: c.data == "achievements")
async def cb_achievements(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await render_achievements(call.message)

@dp.message(Command("achievements"))
async def cmd_achievements(message: Message, state: FSMContext):
    await state.clear()
    await render_achievements(message)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏
@dp.message(Command("addpractice"), StateFilter("*"))
async def cmd_add_practice(message: Message, state: FSMContext):
    await message.answer("üßò –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏:")
    await state.set_state(AddPracticeStates.name)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ: –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è
@dp.message(AddPracticeStates.name)
async def receive_practice_name(message: Message, state: FSMContext):
    practice_name = message.text.strip().lower()
    await state.update_data(name=practice_name)
    await state.set_state(AddPracticeStates.has_cycles)
    await message.answer("‚è≥ –ù—É–∂–Ω–æ –ª–∏ —É—á–∏—Ç—ã–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤? (–¥–∞ / –Ω–µ—Ç)")

# –°–æ—Å—Ç–æ—è–Ω–∏–µ: –≤—ã–±–æ—Ä —Ñ–ª–∞–≥–∞ has_cycles
@dp.message(AddPracticeStates.has_cycles)
async def save_practice(message: Message, state: FSMContext):
    answer = message.text.strip().lower()
    has_cycles = answer in ["–¥–∞", "yes", "y"]
    user_id = str(message.from_user.id)
    data = await state.get_data()
    name = data["name"]

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT INTO practices (user_id, name, has_cycles) VALUES (?, ?, ?)",
            (user_id, name, has_cycles)
        )
        await db.commit()

    await message.answer(f"‚úÖ –ü—Ä–∞–∫—Ç–∏–∫–∞ ¬´{name.capitalize()}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        # ‚Äî‚Äî‚Äî –æ–Ω–±–æ—Ä–¥–∏–Ω–≥: –®–∞–≥‚ÄØ2¬†‚Üí¬†3 ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
    user_id = str(message.from_user.id)
    if await get_onboarding_step(user_id) == 2:
        await set_onboarding_step(user_id, 3)
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –ü–æ—Ä–∞ –∑–∞–ø–∏—Å–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n"
            "–®–∞–≥ 3/6. –í–≤–µ–¥–∏—Ç–µ /log, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É."
        )
    await state.clear()

class TZStates(StatesGroup):
    waiting_for_tz = State()

@dp.message(TZStates.waiting_for_tz)
async def set_timezone_handler(message: Message, state: FSMContext):
    tz_text = message.text.strip() or "Europe/Moscow"
    user_id = str(message.from_user.id)

    try:
        tz_obj = pytz.timezone(tz_text)
        tz_text = tz_obj.zone
    except pytz.UnknownTimeZoneError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞. –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: `Europe/Moscow`")
        return

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("INSERT OR IGNORE INTO users(user_id) VALUES(?)", (user_id,))
        await db.execute("UPDATE users SET timezone = ? WHERE user_id = ?", (tz_text, user_id))
        await db.commit()

    # –ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥ –Ω–æ–≤—É—é –∑–æ–Ω—É (–µ—Å–ª–∏ –µ—Å—Ç—å —É –≤–∞—Å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è)
    await schedule_daily_notification(user_id)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
    step = await get_onboarding_step(user_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    text = f"‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {tz_text}."

    if step == 1:
        await set_onboarding_step(user_id, 2)
        text += (
            "\n\n–®–∞–≥ 2/6. –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–∏–º –ø–µ—Ä–≤—É—é –ø—Ä–∞–∫—Ç–∏–∫—É.\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /addpractice, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é –ø—Ä–∞–∫—Ç–∏–∫—É.\n"
        )

    await message.answer(text)
    await state.clear()




async def send_chart_mode_selector(call: CallbackQuery, practice_name: str):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è± –ú–∏–Ω—É—Ç—ã", callback_data=f"chart_practice:minutes:{practice_name}")],
        [InlineKeyboardButton(text="üîÅ –¶–∏–∫–ª—ã", callback_data=f"chart_practice:cycles:{practice_name}")],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="back_to_main")]
    ])
    await call.message.answer(
        f"–ö–∞–∫–æ–π –≥—Ä–∞—Ñ–∏–∫ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–ª—è ¬´{practice_name.capitalize()}¬ª?",
        reply_markup=keyboard
    )

# utils.py (–∏–ª–∏ –≤ bot.py)
async def get_user_practices(user_id: str) -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: name -> has_cycles
    """
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            "SELECT name, has_cycles FROM practices WHERE user_id = ? AND is_active = 1",
            (user_id,)
        )
        rows = await cursor.fetchall()
    return {name.lower(): bool(has_cycles) for name, has_cycles in rows}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚öôÔ∏è  –¢–µ—Ö–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.message(Command("resetonb"), StateFilter("*"))
async def cmd_reset_onboarding(message: Message, state: FSMContext):
    """
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç onboarding_step –¥–æ 0, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ
    –ø—Ä–æ–π—Ç–∏ –≤–≤–æ–¥–Ω—ã–π –∫—É—Ä—Å –∑–∞–Ω–æ–≤–æ.
    –ù–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –º–µ–Ω—é/–ø–æ–¥—Å–∫–∞–∑–∫–∞–º ‚Äî —á–∏—Å—Ç–æ –¥–ª—è dev-debug.
    """
    # 1. (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –ø–æ user_id
    DEV_IDS = {123456789, 987654321}          # ‚Üê —Å–≤–æ–∏ Telegram-ID
    if message.from_user.id not in DEV_IDS:
        return                                # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å

    await state.clear()                       # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    uid = str(message.from_user.id)

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "UPDATE users SET onboarding_step = 0 WHERE user_id = ?",
            (uid,)
        )
        await db.commit()

    await message.answer(
        "üîÑ –û–Ω–±–æ—Ä–¥–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üöÄ –ü—Ä–æ–π—Ç–∏ –≤–≤–æ–¥–Ω—ã–π –∫—É—Ä—Å¬ª –∏–ª–∏ –≤—ã–∑–æ–≤–∏—Ç–µ /start.",
        parse_mode=ParseMode.HTML
    )


# –ú–µ–Ω—é –±–æ—Ç–∞
async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="log", description="üìù –ó–∞–ø–∏—Å–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É"),
        BotCommand(command="progress", description="üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –¥–Ω—è–º"),
        BotCommand(command="chart", description="üìà –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∞–∫—Ç–∏–∫–∏"),
        BotCommand(command="addpractice", description="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø—Ä–∞–∫—Ç–∏–∫—É"),
        BotCommand(command="mypractices", description="üìã –ú–æ–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏"),
        BotCommand(command="help", description="‚ÑπÔ∏è –ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"),
        BotCommand(command="mandala", description="üåÄ –†–∞–∑–¥–µ–ª ¬´–ú–∞–Ω–¥–∞–ª–∞¬ª"),
        BotCommand(command="deletepractice", description="‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É"),
        BotCommand(command="achievements", description="üèÜ –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"),
    ]
    await bot.set_my_commands(commands)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await init_db()
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT user_id FROM users")
        rows = await cur.fetchall()                 # ‚Üê –ø–æ–ª—É—á–∏–ª–∏ —Å–ø–∏—Å–æ–∫
        for (uid,) in rows:
            await schedule_daily_notification(uid)
    if not scheduler.running:
        scheduler.start()            
    register_mandala_handlers(dp)       # –≤–µ—à–∞–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –ú–∞–Ω–¥–∞–ª—ã
    await set_bot_commands(bot)
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

    

if __name__ == "__main__":
    asyncio.run(main())

