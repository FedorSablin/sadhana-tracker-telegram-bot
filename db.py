# db.py

import aiosqlite

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
DB_PATH = "sadhana.db"
# –û—Ç–¥–µ–ª—å–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–ª—è –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
KB_DB_PATH = "knowledge.db"

# ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        # –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ (—É–∂–µ –µ—Å—Ç—å)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS logs (
                user_id TEXT,
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                date TEXT,
                practice TEXT,
                minutes INTEGER,
                cycles INTEGER
            )
        """) 
        # üîß –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø—Ä–∞–∫—Ç–∏–∫
        await db.execute("""
            CREATE TABLE IF NOT EXISTS practices (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id TEXT,
                name TEXT,
                has_cycles BOOLEAN DEFAULT FALSE,
                is_active BOOLEAN DEFAULT TRUE
            )
        """)
        # –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id   TEXT PRIMARY KEY,
                timezone  TEXT DEFAULT 'UTC',
                notify_hour  INTEGER DEFAULT 19,   -- ‚è∞ –Ω–æ–≤–æ–µ
                notify_min   INTEGER DEFAULT 0,
                onboarding_step INTEGER DEFAULT 0 
            );
        """)
               # --- –∞–≤—Ç–æ-–º–∏–≥—Ä–∞—Ü–∏—è –∫–æ–ª–æ–Ω–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
        # --- –∞–≤—Ç–æ‚Äë–º–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã logs: –¥–æ–±–∞–≤–ª—è–µ–º id, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        cur = await db.execute("PRAGMA table_info(users)")
        cols = [row[1] for row in await cur.fetchall()]

        if "notify_hour" not in cols:
            await db.execute(
                "ALTER TABLE users ADD COLUMN notify_hour INTEGER DEFAULT 19"
            )
        if "notify_min" not in cols:
            await db.execute(
                "ALTER TABLE users ADD COLUMN notify_min INTEGER DEFAULT 0"
            )
        if "onboarding_step" not in cols:
            await db.execute(
                "ALTER TABLE users ADD COLUMN onboarding_step INTEGER DEFAULT 0"
            )

        # --- –∞–≤—Ç–æ‚Äë–º–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è LOGS  (–æ–¥–∏–Ω —Ä–∞–∑, —É–∂–µ —á–∏–Ω–∏–ª–∏) ------------------
        cur = await db.execute("PRAGMA table_info(logs)")
        cols = [row[1] for row in await cur.fetchall()]
        if "id" not in cols:
            await db.execute(
                "ALTER TABLE logs ADD COLUMN id INTEGER PRIMARY KEY AUTOINCREMENT"
            )

        # üëá —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è ¬´–ú–∞–Ω–¥–∞–ª—ã¬ª
        await db.execute("""
           CREATE TABLE IF NOT EXISTS mandalas (
               id          INTEGER PRIMARY KEY AUTOINCREMENT,
               user_id     TEXT    NOT NULL,
               practice    TEXT    NOT NULL,
               start_date  TEXT    NOT NULL,  -- —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
               mode        TEXT    NOT NULL,  -- '40x2' –∏–ª–∏ '90x1'
               progress    INTEGER NOT NULL,  -- —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —É–∂–µ —Å–¥–µ–ª–∞–ª–∏
               total       INTEGER NOT NULL,  -- 80 –¥–ª—è 40x2 –∏–ª–∏ 90 –¥–ª—è 90x1
               is_active   BOOLEAN NOT NULL   -- TRUE, –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
           );
        """)
        # üëá –£—á—ë—Ç ¬´—Å–∫–æ–ª—å–∫–æ —Å–µ–∞–Ω—Å–æ–≤ –∑–∞ –¥–µ–Ω—å¬ª –¥–ª—è –º–∞–Ω–¥–∞–ª—ã
        await db.execute("""
            CREATE TABLE IF NOT EXISTS mandala_days (
                mandala_id  INTEGER,
                date        TEXT,          -- YYYY-MM-DD
                sessions    INTEGER DEFAULT 0,
                PRIMARY KEY (mandala_id, date)
            );
        """)
        # 1.1  –¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        await db.execute("""
            CREATE TABLE IF NOT EXISTS achievements (
                id          INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id     TEXT,
                practice    TEXT,
                mode        TEXT,            -- '40x2' | '90x1'
                start_date  TEXT,            -- 2025-04-01
                end_date    TEXT,            -- 2025-05-10
                total_days  INTEGER,         -- 40 –∏–ª–∏ 90
                created_at  TEXT,            -- timestamp() –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
               UNIQUE(user_id, practice, start_date, end_date)
           );
        """)
        await db.commit()

    # –°–æ–∑–¥–∞—ë–º –æ—Ç–¥–µ–ª—å–Ω—É—é –ë–î –∑–Ω–∞–Ω–∏–π
    await init_kb_db()


async def init_kb_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."""
    async with aiosqlite.connect(KB_DB_PATH) as db:
        await db.execute(
            """
            CREATE TABLE IF NOT EXISTS knowledge_base (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                title TEXT NOT NULL,
                content TEXT NOT NULL
            );
            """
        )
        await db.commit()

# ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –ø—Ä–∞–∫—Ç–∏–∫–∏
async def save_practice_log(user_id: str, date: str, log: dict):
    async with aiosqlite.connect(DB_PATH) as db:
        for practice, values in log.items():
            minutes = values.get("minutes", 0)
            cycles = values.get("cycles")  # –º–æ–∂–µ—Ç –±—ã—Ç—å None
            await db.execute("""
                INSERT INTO logs (user_id, date, practice, minutes, cycles)
                VALUES (?, ?, ?, ?, ?)
            """, (user_id, date, practice.lower(), minutes, cycles))
        await db.commit()

async def get_user_practices_with_cycles(user_id: str) -> list[str]:
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("""
            SELECT name FROM practices
            WHERE user_id = ? AND has_cycles = 1 AND is_active = 1
        """, (user_id,))
        rows = await cursor.fetchall()
    return [row[0] for row in rows]

async def update_mode():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            UPDATE mandalas
            SET mode = '40x2'  -- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ—Ç
            WHERE mode IS NULL;
        """)
        await db.commit()

# –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã
        await update_mode()
